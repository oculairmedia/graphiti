name: Build Rust Search Service

on:
  push:
    branches:
      - main
      - feature/graph-service-performance
    paths:
      - 'graphiti-search-rs/**'
      - '.github/workflows/rust-search-service.yml'
  pull_request:
    branches:
      - main
      - feature/graph-service-performance
    paths:
      - 'graphiti-search-rs/**'
      - '.github/workflows/rust-search-service.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: oculairmedia/graphiti-search-rs

jobs:
  test:
    name: Test Rust Search Service
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./graphiti-search-rs
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy
      
      # Skip sccache for now - it's having issues with GitHub Actions
      # - name: Setup sccache
      #   uses: mozilla-actions/sccache-action@v0.0.3
      # 
      # - name: Configure sccache
      #   run: |
      #     echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
      #     echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./graphiti-search-rs -> target"
          cache-on-failure: true
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy -- -D warnings
      
      - name: Run tests
        run: cargo test --verbose
      
      - name: Build release binary
        run: cargo build --release

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./graphiti-search-rs
          file: ./graphiti-search-rs/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

  benchmark:
    name: Run Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/feature/graph-service-performance'
    defaults:
      run:
        working-directory: ./graphiti-search-rs
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      
      # Skip sccache for now - it's having issues with GitHub Actions
      # - name: Setup sccache
      #   uses: mozilla-actions/sccache-action@v0.0.3
      # 
      # - name: Configure sccache
      #   run: |
      #     echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
      #     echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./graphiti-search-rs -> target"
          cache-on-failure: true
          key: "bench"
      
      - name: Run benchmarks
        run: |
          cargo build --release
          # Run any benchmarks if they exist
          if [ -d "benches" ]; then
            cargo bench --no-fail-fast || true
          fi
      
      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: ./graphiti-search-rs/target/criterion

  integration-test:
    name: Integration Test with FalkorDB
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push'
    
    services:
      falkordb:
        image: falkordb/falkordb:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          pip install aiohttp pydantic
      
      - name: Pull and run Rust search service
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          docker run -d \
            --name graphiti-search \
            --network host \
            -e FALKORDB_HOST=localhost \
            -e FALKORDB_PORT=6379 \
            -e REDIS_URL=redis://localhost:6380 \
            -e PORT=3004 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
      
      - name: Wait for service to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3004/health; then
              echo "Service is ready"
              break
            fi
            echo "Waiting for service... ($i/30)"
            sleep 2
          done
      
      - name: Test health endpoint
        run: |
          response=$(curl -s http://localhost:3004/health)
          echo "Health check response: $response"
          echo "$response" | jq -e '.status == "healthy"'
      
      - name: Test search endpoint
        run: |
          curl -X POST http://localhost:3004/search \
            -H "Content-Type: application/json" \
            -d '{
              "query": "test",
              "config": {
                "limit": 10,
                "reranker_min_score": 0.5
              },
              "filters": {}
            }' | jq .
      
      - name: Show service logs
        if: always()
        run: docker logs graphiti-search