name: Build and Push Frontend Container

on:
  push:
    branches: [ main, feature/real-time-node-glow ]
    paths:
      - 'frontend/**'
      - '.github/workflows/build-frontend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Minimal depth to avoid git issues
        fetch-depth: 1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Pre-build diagnostics
      working-directory: frontend
      run: |
        echo "=== Environment info ==="
        node --version
        npm --version
        echo "=== Files check ==="
        ls -la
        test -f package.json && echo "‚úì package.json exists" || echo "‚úó package.json missing"
        test -f package-lock.json && echo "‚úì package-lock.json exists" || echo "‚úó package-lock.json missing"
        test -f .npmrc && echo "‚úì .npmrc exists" || echo "‚úó .npmrc missing"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: docker-build
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        # Add build args for debugging
        build-args: |
          BUILDKIT_STEP_LOG_MAX_SIZE=10485760
          BUILDKIT_STEP_LOG_MAX_SPEED=10485760

    - name: Build fallback - minimal Dockerfile
      if: failure() && steps.docker-build.outcome == 'failure'
      working-directory: frontend
      run: |
        echo "=== Main build failed, trying minimal Dockerfile ==="
        docker build -f Dockerfile.minimal -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:minimal-test . || \
        echo "Minimal build also failed"

    - name: Output image details
      if: success()
      run: |
        echo "‚úÖ Image successfully built and pushed!"
        echo "üì¶ Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"