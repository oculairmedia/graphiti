name: Build and Push Frontend Container

on:
  push:
    branches: [ main, feature/real-time-node-glow ]
    paths:
      - 'frontend/**'
      - '.github/workflows/build-frontend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    defaults:
      run:
        working-directory: frontend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Ensure we have a proper git directory
        fetch-depth: 0

    - name: Debug - List frontend directory
      run: |
        echo "=== Frontend directory contents ==="
        ls -la
        echo "=== Package.json contents ==="
        cat package.json
        echo "=== Checking for git directory ==="
        git status || echo "Git not available"

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Output image details
      run: |
        echo "Image pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"