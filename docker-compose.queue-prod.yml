version: '3.8'

services:
  # Queued service for high-performance message queue
  queued:
    image: ghcr.io/oculairmedia/graphiti-queued:ingestion-queue-system
    container_name: graphiti-queued
    restart: unless-stopped
    ports:
      - "8093:8080"  # Queue service API
    volumes:
      - queued_data:/data  # Persistent queue storage
    environment:
      - QUEUED_DATA_DIR=/data
      - RUST_LOG=queued=info
    networks:
      - graphiti_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/queues"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Worker service for processing queue tasks
  graphiti-worker:
    image: ghcr.io/oculairmedia/graphiti-worker:ingestion-queue-system
    container_name: graphiti-worker-1
    restart: unless-stopped
    environment:
      - QUEUED_URL=http://queued:8080
      - FALKORDB_HOST=falkordb
      - FALKORDB_PORT=6379
      - FALKORDB_DATABASE=graphiti_migration
      - OPENAI_API_KEY=${OPENAI_API_KEY:-dummy_key_using_ollama_instead}
      # Cerebras configuration
      - USE_CEREBRAS=${USE_CEREBRAS:-false}
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
      - CEREBRAS_MODEL=${CEREBRAS_MODEL:-qwen-3-coder-480b}
      - CEREBRAS_SMALL_MODEL=${CEREBRAS_SMALL_MODEL:-qwen-3-32b}
      # Ollama configuration (used when USE_CEREBRAS=false)
      - USE_OLLAMA=${USE_OLLAMA:-true}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://100.81.139.20:11434/v1}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-gemma3:12b}
      - USE_OLLAMA_EMBEDDINGS=true
      - USE_DEDICATED_EMBEDDING_ENDPOINT=true
      - OLLAMA_EMBEDDING_BASE_URL=${OLLAMA_EMBEDDING_BASE_URL:-http://192.168.50.80:11434/v1}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL:-mxbai-embed-large:latest}
      - OLLAMA_EMBEDDING_API_KEY=${OLLAMA_EMBEDDING_API_KEY:-ollama}
      - RUST_CENTRALITY_URL=http://graphiti-centrality-rs:3003
      - WORKER_COUNT=1
      - ENABLE_CROSS_GRAPH_DEDUPLICATION=true
      - BATCH_SIZE=1
      - POLL_INTERVAL=2.0
      - PYTHONUNBUFFERED=1
      - DRIVER_TYPE=falkordb
    depends_on:
      queued:
        condition: service_healthy
    networks:
      - graphiti_network

  # Dashboard service for monitoring
  graphiti-dashboard:
    image: ghcr.io/oculairmedia/graphiti-dashboard:ingestion-queue-system
    container_name: graphiti-queue-dashboard
    restart: unless-stopped
    ports:
      - "8094:8091"
    environment:
      - QUEUED_URL=http://queued:8080
      - FALKORDB_HOST=falkordb
      - FALKORDB_PORT=6379
      - FALKORDB_DATABASE=graphiti_migration
      - DASHBOARD_PORT=8091
      - ENABLE_DASHBOARD=true
      - PYTHONUNBUFFERED=1
    depends_on:
      queued:
        condition: service_healthy
    networks:
      - graphiti_network

volumes:
  queued_data:
    driver: local

networks:
  graphiti_network:
    external: true
    name: graphiti_graphiti_network