# =============================================================================
# Graphiti Environment Configuration
# =============================================================================
# This file documents all environment variables used across Graphiti services.
# Copy this to .env and customize the values for your deployment.
# 
# Variable Types:
# [REQUIRED] - Must be set for the system to function
# [OPTIONAL] - Has sensible defaults, can be customized
# [DOCKER]   - Only used in Docker deployments
# =============================================================================

# =============================================================================
# API Keys and External Services
# =============================================================================

# OpenAI API Configuration
OPENAI_API_KEY=sk-dummy                    # [REQUIRED] OpenAI API key for LLM operations

# Anthropic API Configuration  
ANTHROPIC_API_KEY=                          # [OPTIONAL] Anthropic API key (alternative LLM provider)

# Cerebras API Configuration (High-speed inference)
USE_CEREBRAS=false                          # [OPTIONAL] Enable Cerebras for primary LLM inference
CEREBRAS_API_KEY=                           # [REQUIRED if USE_CEREBRAS=true] Cerebras API key
CEREBRAS_MODEL=qwen-3-coder-480b           # [OPTIONAL] Primary Cerebras model for inference
CEREBRAS_SMALL_MODEL=qwen-3-coder-480b     # [OPTIONAL] Smaller Cerebras model for simple tasks
CEREBRAS_BATCH_SIZE=2                       # [OPTIONAL] Batch size for Cerebras requests
ENABLE_FALLBACK=true                        # [OPTIONAL] Use Ollama when Cerebras hits rate limits

# =============================================================================
# Local LLM Configuration (Ollama)
# =============================================================================

# Primary Ollama Configuration
USE_OLLAMA=true                             # [OPTIONAL] Enable Ollama for local LLM inference
OLLAMA_BASE_URL=http://localhost:11434/v1   # [OPTIONAL] Ollama server endpoint
OLLAMA_MODEL=gemma3:12b                     # [OPTIONAL] Primary model for text generation
OLLAMA_SMALL_MODEL=gemma3:12b               # [OPTIONAL] Model for simple/fast operations
OLLAMA_BATCH_SIZE=1                         # [OPTIONAL] Batch size for Ollama requests

# Ollama Embedding Configuration
USE_OLLAMA_EMBEDDINGS=true                  # [OPTIONAL] Use Ollama for text embeddings
OLLAMA_EMBEDDING_MODEL=mxbai-embed-large:latest  # [OPTIONAL] Model for generating embeddings

# Dedicated Embedding Endpoint (Optional Performance Optimization)
USE_DEDICATED_EMBEDDING_ENDPOINT=true       # [OPTIONAL] Use separate Ollama instance for embeddings
OLLAMA_EMBEDDING_BASE_URL=http://localhost:11434/v1  # [OPTIONAL] Dedicated embedding server URL
OLLAMA_EMBEDDING_API_KEY=ollama             # [OPTIONAL] API key for embedding endpoint
EMBEDDING_ENDPOINT_FALLBACK=true            # [OPTIONAL] Fallback to main Ollama if dedicated fails

# =============================================================================
# Database Configuration
# =============================================================================

# FalkorDB Configuration (Primary Graph Database)
USE_FALKORDB=true                           # [OPTIONAL] Use FalkorDB as graph database backend
FALKORDB_HOST=localhost                     # [OPTIONAL] FalkorDB server hostname
FALKORDB_PORT=6379                          # [OPTIONAL] FalkorDB server port
FALKORDB_URI=redis://localhost:6379         # [OPTIONAL] Complete FalkorDB connection URI
FALKORDB_USER=                              # [OPTIONAL] FalkorDB username (if auth enabled)
FALKORDB_PASSWORD=                          # [OPTIONAL] FalkorDB password (if auth enabled)
FALKORDB_DATABASE=graphiti_migration        # [OPTIONAL] FalkorDB database name

# Neo4j Configuration (Alternative Graph Database)
NEO4J_URI=bolt://localhost:7687             # [OPTIONAL] Neo4j connection URI
NEO4J_PORT=7687                             # [OPTIONAL] Neo4j server port  
NEO4J_USER=neo4j                            # [OPTIONAL] Neo4j username
NEO4J_PASSWORD=demodemo                     # [OPTIONAL] Neo4j password
NEO4J_DATABASE=neo4j                        # [OPTIONAL] Neo4j database name
USE_PARALLEL_RUNTIME=false                 # [OPTIONAL] Enable Neo4j parallel runtime (enterprise)

# Redis Configuration (Used for caching and queuing)
REDIS_HOST=localhost                        # [OPTIONAL] Redis server hostname
REDIS_PORT=6379                             # [OPTIONAL] Redis server port
REDIS_URL=redis://localhost:6379            # [OPTIONAL] Complete Redis connection URI

# =============================================================================
# Application Configuration  
# =============================================================================

# Core Application Settings
DEFAULT_DATABASE=falkordb                   # [OPTIONAL] Default database backend (falkordb|neo4j)
USE_DETERMINISTIC_UUIDS=true               # [OPTIONAL] Use deterministic UUIDs for entities
PORT=8000                                   # [OPTIONAL] Main API server port
GITHUB_SHA=                                 # [OPTIONAL] Git commit SHA for version tracking
MAX_REFLEXION_ITERATIONS=0                  # [OPTIONAL] Maximum LLM self-correction iterations
SEMAPHORE_LIMIT=10                          # [OPTIONAL] Concurrent operation limit

# =============================================================================
# Graph Processing Configuration
# =============================================================================

# Entity Deduplication Settings
DEDUP_SIMILARITY_THRESHOLD=0.6              # [OPTIONAL] Similarity threshold for entity deduplication
DEDUP_FUZZY_THRESHOLD=0.9                   # [OPTIONAL] Fuzzy matching threshold for entity names
ENABLE_AGGRESSIVE_DEDUP=true                # [OPTIONAL] Enable aggressive deduplication strategies
DEDUP_NORMALIZE_NAMES=true                  # [OPTIONAL] Normalize entity names before comparison
DEDUP_EPISODE_INTERVAL=10                   # [OPTIONAL] Process deduplication every N episodes

# Graph Visualization Limits
NODE_LIMIT=100000                           # [OPTIONAL] Maximum nodes to display in visualization
EDGE_LIMIT=100000                           # [OPTIONAL] Maximum edges to display in visualization  
MIN_DEGREE_CENTRALITY=0.0                   # [OPTIONAL] Minimum centrality score for node display

# =============================================================================
# Performance and Caching
# =============================================================================

# Cache Configuration
CACHE_ENABLED=true                          # [OPTIONAL] Enable application caching
CACHE_TTL_SECONDS=300                       # [OPTIONAL] Cache time-to-live in seconds
CACHE_STRATEGY=aggressive                   # [OPTIONAL] Cache strategy (conservative|balanced|aggressive)
FORCE_FRESH_DATA=false                      # [OPTIONAL] Force fresh data, bypass cache
ENABLE_CACHE_INVALIDATION=true              # [OPTIONAL] Enable automatic cache invalidation

# Connection Management
MAX_CONNECTIONS=32                          # [OPTIONAL] Maximum database connections per service
PARALLEL_THRESHOLD=100                      # [OPTIONAL] Threshold for parallel processing

# =============================================================================
# Queue and Worker Configuration
# =============================================================================

# Message Queue Settings
USE_QUEUE_FOR_INGESTION=true                # [OPTIONAL] Use message queue for ingestion processing
QUEUE_URL=http://localhost:8080              # [OPTIONAL] Message queue server URL
QUEUE_FALLBACK_TO_DIRECT=false              # [OPTIONAL] Fallback to direct processing if queue fails

# Worker Configuration
WORKER_COUNT=2                               # [OPTIONAL] Number of worker processes
BATCH_SIZE=5                                 # [OPTIONAL] Batch size for worker operations
POLL_INTERVAL=1.0                            # [OPTIONAL] Queue polling interval in seconds
ENABLE_DASHBOARD=false                       # [OPTIONAL] Enable worker dashboard UI
LOG_LEVEL=INFO                               # [OPTIONAL] Logging level (DEBUG|INFO|WARNING|ERROR)

# =============================================================================
# Microservices Configuration
# =============================================================================

# Rust Services
USE_RUST_CENTRALITY=true                    # [OPTIONAL] Use Rust service for centrality calculations
RUST_CENTRALITY_URL=http://localhost:3003   # [OPTIONAL] Rust centrality service URL
USE_RUST_SEARCH=true                        # [OPTIONAL] Use Rust service for graph search
RUST_SEARCH_URL=http://localhost:3004       # [OPTIONAL] Rust search service URL
RUST_SERVER_URL=http://localhost:3000       # [OPTIONAL] Rust visualization server URL
RUST_LOG=info                                # [OPTIONAL] Rust services logging level

# Search Service Configuration
RUST_SEARCH_ENABLED=false                   # [OPTIONAL] Feature flag for Rust search service
RUST_SEARCH_PERCENTAGE=0                     # [OPTIONAL] A/B testing percentage for Rust search
ENABLE_SIMD=true                             # [OPTIONAL] Enable SIMD optimizations in Rust search

# =============================================================================
# Webhook and Integration Configuration  
# =============================================================================

# Data Synchronization Webhooks
GRAPHITI_DATA_WEBHOOK_URLS=http://localhost:3000/api/webhooks/data-ingestion  # [OPTIONAL] Comma-separated webhook URLs

# Backup Configuration
BACKUP_RETENTION_DAYS=30                     # [OPTIONAL] Number of daily backups to retain
BACKUP_RETENTION_WEEKLY=12                   # [OPTIONAL] Number of weekly backups to retain  
BACKUP_RETENTION_MONTHLY=12                  # [OPTIONAL] Number of monthly backups to retain
BACKUP_WEBHOOK_URL=                          # [OPTIONAL] Webhook URL for backup notifications
RUN_INITIAL_BACKUP=true                      # [OPTIONAL] Run backup immediately on startup
ENABLE_DASHBOARD=true                        # [OPTIONAL] Enable backup monitoring dashboard

# S3 Backup Configuration (Optional)
S3_ENDPOINT=                                 # [OPTIONAL] S3-compatible endpoint for backup storage
S3_ACCESS_KEY=                               # [OPTIONAL] S3 access key
S3_SECRET_KEY=                               # [OPTIONAL] S3 secret key  
S3_BUCKET=graphiti-backups                   # [OPTIONAL] S3 bucket for backup storage

# =============================================================================
# Frontend Configuration
# =============================================================================

# React Frontend
NODE_ENV=development                         # [OPTIONAL] Node.js environment (development|production)
VITE_API_BASE_URL=http://localhost:3000     # [OPTIONAL] API base URL for frontend
VITE_WS_URL=ws://localhost:3000/ws           # [OPTIONAL] WebSocket URL for real-time updates
VITE_GRAPHITI_WS_URL=ws://localhost:8000/ws  # [OPTIONAL] Graphiti WebSocket URL

# =============================================================================
# Docker-Specific Configuration
# =============================================================================

# FalkorDB Docker Configuration  
REDIS_ARGS=--save 60 1 --save 300 10 --save 900 100 --appendonly yes --appendfsync everysec --loglevel warning --maxmemory 1g --maxmemory-policy allkeys-lru  # [DOCKER] Redis persistence settings
FALKORDB_ARGS=NODE_CREATION_BUFFER 128 QUERY_MEM_CAPACITY 8388608 CMD_INFO no OMP_THREAD_COUNT 1 CACHE_SIZE 5  # [DOCKER] FalkorDB optimization settings

# Queue Service Docker Configuration
QUEUED_DATA_DIR=/data                        # [DOCKER] Queue data directory inside container
QUEUED_BIND_ADDR=0.0.0.0:8080               # [DOCKER] Queue service bind address

# =============================================================================
# Development and Debugging
# =============================================================================

# Logging Configuration  
RUST_LOG=info                                # [OPTIONAL] Rust services log level and filters
ENABLE_DEBUG_LOGGING=false                   # [OPTIONAL] Enable verbose debug logging
LOG_FORMAT=json                              # [OPTIONAL] Log format (json|text)

# Development Features
ENABLE_DEV_TOOLS=false                       # [OPTIONAL] Enable development tools and endpoints
HOT_RELOAD=false                             # [OPTIONAL] Enable hot reload for development
MOCK_EXTERNAL_SERVICES=false                 # [OPTIONAL] Use mock services for development

# =============================================================================
# Security Configuration (Production)
# =============================================================================

# CORS and Security Headers
CORS_ORIGINS=*                               # [PRODUCTION] Allowed CORS origins (comma-separated)
ENABLE_SECURITY_HEADERS=true                 # [PRODUCTION] Enable security headers
API_RATE_LIMIT=1000                          # [PRODUCTION] API rate limit per minute

# Authentication (Future)
# JWT_SECRET=                                # [FUTURE] JWT signing secret
# ENABLE_AUTH=false                          # [FUTURE] Enable authentication