# =============================================================================
# Graphiti Knowledge Graph Platform - Main Configuration
# =============================================================================
# Dockge-compatible single-file Docker Compose configuration
# Includes all services: database, API, visualization, and processing services
# Compatible with environment variable management and service profiles

services:
  # =============================================================================
  # Core Database Services
  # =============================================================================
  falkordb:
    image: falkordb/falkordb:latest
    restart: unless-stopped
    ports:
      - "${FALKORDB_PORT:-6379}:6379"
    volumes:
      - falkordb_data:/var/lib/falkordb/data
    environment:
      - REDIS_ARGS=--save 60 1 --save 300 10 --save 900 100 --appendonly yes --appendfsync everysec --loglevel warning --maxmemory 2g --maxmemory-policy allkeys-lru
      - FALKORDB_ARGS=NODE_CREATION_BUFFER 128 QUERY_MEM_CAPACITY 8388608 CMD_INFO no OMP_THREAD_COUNT 1 CACHE_SIZE 5
    networks:
      - graphiti_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    mem_limit: 2g
    memswap_limit: 2g
    labels:
      - homepage.group=Knowledge Management
      - homepage.name=FalkorDB
      - homepage.icon=si-redis
      - homepage.href=http://${HOMEPAGE_HOST:-192.168.50.90}:${FALKORDB_PORT:-6379}
      - homepage.description=Graph database

  # =============================================================================
  # Rust Services
  # =============================================================================
  graph-visualizer-rust:
    image: ghcr.io/oculairmedia/graphiti-rust-visualizer:main
    restart: unless-stopped
    ports:
      - "${RUST_SERVER_PORT:-3000}:3000"
    environment:
      - FALKORDB_HOST=${FALKORDB_HOST:-falkordb}
      - FALKORDB_PORT=${FALKORDB_PORT:-6379}
      - GRAPH_NAME=${FALKORDB_DATABASE:-graphiti_migration}
      - NODE_LIMIT=${NODE_LIMIT:-100000}
      - EDGE_LIMIT=${EDGE_LIMIT:-100000}
      - MIN_DEGREE_CENTRALITY=${MIN_DEGREE_CENTRALITY:-0}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - RUST_LOG=${RUST_LOG:-info}
    networks:
      - graphiti_network
    depends_on:
      falkordb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      - homepage.group=Knowledge Management
      - homepage.name=Graph Visualizer
      - homepage.icon=si-graphql
      - homepage.href=http://${HOMEPAGE_HOST:-192.168.50.90}:${RUST_SERVER_PORT:-3000}
      - homepage.description=Rust-powered graph visualization server

  graphiti-centrality-rs:
    image: ghcr.io/oculairmedia/graphiti-centrality-rs:main
    restart: unless-stopped
    ports:
      - "${RUST_CENTRALITY_PORT:-3003}:3003"
    environment:
      - FALKORDB_HOST=${FALKORDB_HOST:-falkordb}
      - FALKORDB_PORT=${FALKORDB_PORT:-6379}
      - GRAPH_NAME=${FALKORDB_DATABASE:-graphiti_migration}
      - RUST_LOG=${RUST_LOG:-info}
    networks:
      - graphiti_network
    depends_on:
      falkordb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - homepage.group=Knowledge Management
      - homepage.name=Centrality Service
      - homepage.icon=si-databricks
      - homepage.href=http://${HOMEPAGE_HOST:-192.168.50.90}:${RUST_CENTRALITY_PORT:-3003}
      - homepage.description=Graph centrality calculations

  graphiti-search-rs:
    image: ghcr.io/oculairmedia/graphiti-search-rs:feature-mcp-fastmcp-enhancement
    restart: unless-stopped
    ports:
      - "${RUST_SEARCH_PORT:-3004}:3004"
    environment:
      - FALKORDB_HOST=${FALKORDB_HOST:-falkordb}
      - FALKORDB_PORT=${FALKORDB_PORT:-6379}
      - GRAPH_NAME=${FALKORDB_DATABASE:-graphiti_migration}
      - REDIS_URL=${REDIS_URL:-redis://falkordb:6379}
      - RUST_LOG=${RUST_LOG:-info}
    networks:
      - graphiti_network
    depends_on:
      falkordb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - homepage.group=Knowledge Management
      - homepage.name=Search Service
      - homepage.icon=si-elasticsearch
      - homepage.href=http://${HOMEPAGE_HOST:-192.168.50.90}:${RUST_SEARCH_PORT:-3004}
      - homepage.description=High-performance graph search

  # =============================================================================
  # API and Processing Services
  # =============================================================================
  graph:
    image: ghcr.io/oculairmedia/graphiti-api:main
    restart: unless-stopped
    ports:
      - "${API_PORT:-8003}:8000"
    volumes:
      - ./server/graph_service/zep_graphiti.py:/app/server/graph_service/zep_graphiti.py:ro
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-dummy}
      - FALKORDB_HOST=${FALKORDB_HOST:-falkordb}
      - FALKORDB_PORT=${FALKORDB_PORT:-6379}
      - FALKORDB_URI=${FALKORDB_URI:-redis://falkordb:6379}
      - FALKORDB_DATABASE=${FALKORDB_DATABASE:-graphiti_migration}
      - USE_FALKORDB=${USE_FALKORDB:-true}
      - NEO4J_DATABASE=${NEO4J_DATABASE:-neo4j}
      - USE_DETERMINISTIC_UUIDS=${USE_DETERMINISTIC_UUIDS:-true}
      - PORT=8000
      - USE_CEREBRAS=${USE_CEREBRAS:-false}
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
      - CEREBRAS_MODEL=${CEREBRAS_MODEL:-qwen-3-coder-480b}
      - CEREBRAS_SMALL_MODEL=${CEREBRAS_SMALL_MODEL:-qwen-3-coder-480b}
      - USE_OLLAMA=${USE_OLLAMA:-true}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://100.81.139.20:11434/v1}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-gemma3:12b}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL:-mxbai-embed-large:latest}
      - USE_OLLAMA_EMBEDDINGS=${USE_OLLAMA_EMBEDDINGS:-true}
      - USE_DEDICATED_EMBEDDING_ENDPOINT=${USE_DEDICATED_EMBEDDING_ENDPOINT:-true}
      - OLLAMA_EMBEDDING_BASE_URL=${OLLAMA_EMBEDDING_BASE_URL:-http://192.168.50.80:11434/v1}
      - OLLAMA_EMBEDDING_API_KEY=${OLLAMA_EMBEDDING_API_KEY:-ollama}
      - EMBEDDING_ENDPOINT_FALLBACK=${EMBEDDING_ENDPOINT_FALLBACK:-true}
      - USE_RUST_CENTRALITY=${USE_RUST_CENTRALITY:-true}
      - RUST_CENTRALITY_URL=${RUST_CENTRALITY_URL:-http://graphiti-centrality-rs:3003}
      - RUST_SERVER_URL=${RUST_SERVER_URL:-http://graph-visualizer-rust:3000}
      - RUST_SEARCH_URL=${RUST_SEARCH_URL:-http://graphiti-search-rs:3004}
      - USE_RUST_SEARCH=${USE_RUST_SEARCH:-true}
      - NODE_LIMIT=${NODE_LIMIT:-100000}
      - EDGE_LIMIT=${EDGE_LIMIT:-100000}
      - MIN_DEGREE_CENTRALITY=${MIN_DEGREE_CENTRALITY:-0}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_DEBUG_LOGGING=${ENABLE_DEBUG_LOGGING:-false}
      - ENABLE_CACHE_INVALIDATION=${ENABLE_CACHE_INVALIDATION:-true}
      - GRAPHITI_DATA_WEBHOOK_URLS=${GRAPHITI_DATA_WEBHOOK_URLS:-http://graph-visualizer-rust:3000/api/webhooks/data-ingestion}
      - USE_QUEUE_FOR_INGESTION=${USE_QUEUE_FOR_INGESTION:-true}
      - QUEUE_URL=http://graphiti-queued:8080
      - DEDUP_SIMILARITY_THRESHOLD=${DEDUP_SIMILARITY_THRESHOLD:-0.6}
      - DEDUP_FUZZY_THRESHOLD=${DEDUP_FUZZY_THRESHOLD:-0.9}
      - ENABLE_AGGRESSIVE_DEDUP=${ENABLE_AGGRESSIVE_DEDUP:-true}
      - DEDUP_NORMALIZE_NAMES=${DEDUP_NORMALIZE_NAMES:-true}
      - DEDUP_EPISODE_INTERVAL=${DEDUP_EPISODE_INTERVAL:-10}
    networks:
      - graphiti_network
    depends_on:
      falkordb:
        condition: service_healthy
      graphiti-centrality-rs:
        condition: service_healthy
      graphiti-queued:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/healthcheck')"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - homepage.group=Knowledge Management
      - homepage.name=Graphiti API
      - homepage.icon=si-fastapi
      - homepage.href=http://${HOMEPAGE_HOST:-192.168.50.90}:${API_PORT:-8003}
      - homepage.description=Knowledge graph API service

  graphiti-mcp:
    image: ghcr.io/oculairmedia/graphiti-mcp:feature-mcp-fastmcp-enhancement
    restart: unless-stopped
    ports:
      - "${MCP_PORT:-3010}:3010"
    environment:
      - FALKORDB_HOST=${FALKORDB_HOST:-falkordb}
      - FALKORDB_PORT=${FALKORDB_PORT:-6379}
      - FALKORDB_URI=${FALKORDB_URI:-redis://falkordb:6379}
      - FALKORDB_DATABASE=${FALKORDB_DATABASE:-graphiti_migration}
      - USE_FALKORDB=${USE_FALKORDB:-true}
      - NEO4J_DATABASE=${NEO4J_DATABASE:-neo4j}
      - USE_CEREBRAS=${USE_CEREBRAS:-false}
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
      - CEREBRAS_MODEL=${CEREBRAS_MODEL:-qwen-3-coder-480b}
      - CEREBRAS_SMALL_MODEL=${CEREBRAS_SMALL_MODEL:-qwen-3-coder-480b}
      - USE_OLLAMA=${USE_OLLAMA:-true}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://100.81.139.20:11434/v1}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-gemma3:12b}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL:-mxbai-embed-large:latest}
      - USE_OLLAMA_EMBEDDINGS=${USE_OLLAMA_EMBEDDINGS:-true}
      - USE_DEDICATED_EMBEDDING_ENDPOINT=${USE_DEDICATED_EMBEDDING_ENDPOINT:-true}
      - OLLAMA_EMBEDDING_BASE_URL=${OLLAMA_EMBEDDING_BASE_URL:-http://192.168.50.80:11434/v1}
      - OLLAMA_EMBEDDING_API_KEY=${OLLAMA_EMBEDDING_API_KEY:-ollama}
      - EMBEDDING_ENDPOINT_FALLBACK=${EMBEDDING_ENDPOINT_FALLBACK:-true}
      - SEMAPHORE_LIMIT=${SEMAPHORE_LIMIT:-5}
      - MCP_SERVER_PORT=3010
      - MCP_TRANSPORT=http
      - GRAPH_API_URL=http://graph:8000
    networks:
      - graphiti_network
    depends_on:
      falkordb:
        condition: service_healthy
      graph:
        condition: service_healthy
    labels:
      - homepage.group=Knowledge Management
      - homepage.name=MCP Server
      - homepage.icon=si-rss
      - homepage.href=http://${HOMEPAGE_HOST:-192.168.50.90}:${MCP_PORT:-3010}
      - homepage.description=Model Context Protocol server

  # =============================================================================
  # Queue and Worker Services
  # =============================================================================
  graphiti-queued:
    image: ghcr.io/oculairmedia/graphiti-queued:main
    restart: unless-stopped
    ports:
      - "${QUEUE_PORT:-8093}:8080"
    volumes:
      - queued_data:/data
    environment:
      - QUEUED_DATA_DIR=/data
      - QUEUED_BIND_ADDR=0.0.0.0:8080
      - RUST_LOG=${RUST_LOG:-info}
    networks:
      - graphiti_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    labels:
      - homepage.group=Knowledge Management
      - homepage.name=Queue Service
      - homepage.icon=si-queue
      - homepage.href=http://${HOMEPAGE_HOST:-192.168.50.90}:${QUEUE_PORT:-8093}
      - homepage.description=Message queue for ingestion processing

  graphiti-worker:
    image: ghcr.io/oculairmedia/graphiti-worker:main
    restart: unless-stopped
    environment:
      - QUEUE_URL=http://graphiti-queued:8080
      - FALKORDB_HOST=${FALKORDB_HOST:-falkordb}
      - FALKORDB_PORT=${FALKORDB_PORT:-6379}
      - FALKORDB_DATABASE=${FALKORDB_DATABASE:-graphiti_migration}
      - USE_FALKORDB=${USE_FALKORDB:-true}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-dummy}
      - USE_CEREBRAS=${USE_CEREBRAS:-false}
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
      - CEREBRAS_MODEL=${CEREBRAS_MODEL:-qwen-3-coder-480b}
      - CEREBRAS_SMALL_MODEL=${CEREBRAS_SMALL_MODEL:-qwen-3-coder-480b}
      - USE_OLLAMA=${USE_OLLAMA:-true}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://100.81.139.20:11434/v1}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-gemma3:12b}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL:-mxbai-embed-large:latest}
      - USE_OLLAMA_EMBEDDINGS=${USE_OLLAMA_EMBEDDINGS:-true}
      - USE_DEDICATED_EMBEDDING_ENDPOINT=${USE_DEDICATED_EMBEDDING_ENDPOINT:-true}
      - OLLAMA_EMBEDDING_BASE_URL=${OLLAMA_EMBEDDING_BASE_URL:-http://192.168.50.80:11434/v1}
      - OLLAMA_EMBEDDING_API_KEY=${OLLAMA_EMBEDDING_API_KEY:-ollama}
      - EMBEDDING_ENDPOINT_FALLBACK=${EMBEDDING_ENDPOINT_FALLBACK:-true}
      - WORKER_COUNT=${WORKER_COUNT:-2}
      - BATCH_SIZE=${BATCH_SIZE:-5}
      - POLL_INTERVAL=${POLL_INTERVAL:-2.0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - graphiti_network
    depends_on:
      graphiti-queued:
        condition: service_healthy
      falkordb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]  # Basic process check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - homepage.group=Knowledge Management
      - homepage.name=Worker
      - homepage.icon=si-worker
      - homepage.description=Ingestion queue worker

  # =============================================================================
  # Reverse Proxy and Load Balancing
  # =============================================================================
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-8088}:80"
      - "${NGINX_HTTPS_PORT:-8443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - graphiti_network
    depends_on:
      graph:
        condition: service_healthy
      graph-visualizer-rust:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    labels:
      - homepage.group=Knowledge Management
      - homepage.name=Nginx Proxy
      - homepage.icon=si-nginx
      - homepage.href=http://${HOMEPAGE_HOST:-192.168.50.90}:${NGINX_HTTP_PORT:-8088}
      - homepage.description=Reverse proxy and load balancer

  # =============================================================================
  # Optional Services (Profiles)
  # =============================================================================
  # Frontend service (profile-based)
  frontend:
    image: ghcr.io/oculairmedia/graphiti-frontend:main
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-8084}:80"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://graph-visualizer-rust:3000
      - VITE_WS_URL=ws://graph-visualizer-rust:3000/ws
    networks:
      - graphiti_network
    depends_on:
      graph-visualizer-rust:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - homepage.group=Knowledge Management
      - homepage.name=Frontend
      - homepage.icon=si-react
      - homepage.href=http://${HOMEPAGE_HOST:-192.168.50.90}:${FRONTEND_PORT:-8084}
      - homepage.description=React frontend interface

# =============================================================================
# Shared Volumes
# =============================================================================
volumes:
  falkordb_data:
    driver: local
    labels:
      - description=FalkorDB persistent data
  queued_data:
    driver: local
    labels:
      - description=Queue service persistent data
  nginx_logs:
    driver: local
    labels:
      - description=Nginx access and error logs

# =============================================================================
# Networks
# =============================================================================
networks:
  graphiti_network:
    driver: bridge
    labels:
      - description=Graphiti application network