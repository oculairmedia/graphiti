services:
  graph:
    build:
      context: .
    ports:
      - "8003:8000"
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8000/healthcheck')",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      falkordb:
        condition: service_healthy
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-dummy}
      - FALKORDB_HOST=falkordb
      - FALKORDB_PORT=6379
      - FALKORDB_URI=redis://falkordb:6379
      - USE_FALKORDB=true
      - PORT=8000
      # Ollama configuration from .env file
      - USE_OLLAMA=${USE_OLLAMA:-true}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://100.81.139.20:11434/v1}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-qwen3:32b}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL:-mxbai-embed-large:latest}
      - USE_OLLAMA_EMBEDDINGS=${USE_OLLAMA_EMBEDDINGS:-true}
    networks:
      - graphiti_network
    labels:
      - "homepage.group=Knowledge Management"
      - "homepage.name=Graphiti API"
      - "homepage.icon=si-graphql"
      - "homepage.href=http://192.168.50.90:8000"
      - "homepage.description=Knowledge graph API service"
  neo4j:
    image: neo4j:5.26.2
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:${NEO4J_PORT:-7474} || exit 1",
        ]
      interval: 1s
      timeout: 10s
      retries: 10
      start_period: 3s
    ports:
      - "7474:7474" # HTTP
      - "${NEO4J_PORT:-7687}:${NEO4J_PORT:-7687}" # Bolt
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
    networks:
      - graphiti_network
    labels:
      - "homepage.group=Knowledge Management"
      - "homepage.name=Neo4j Database"
      - "homepage.icon=si-neo4j"
      - "homepage.href=http://192.168.50.90:7474"
      - "homepage.description=Neo4j graph database browser"

  falkordb:
    build:
      context: .
      dockerfile: Dockerfile.falkordb-custom
    # command removed as it's handled in the custom entrypoint
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 10
      start_period: 3s
    ports:
      - "6389:6379"  # Redis/FalkorDB port (changed from 6379)
      - "3100:3000"  # FalkorDB UI
    volumes:
      - falkordb_data:/data
    environment:
      - REDIS_URL=redis://192.168.50.90:6389
      - NEXT_PUBLIC_REDIS_URL=redis://192.168.50.90:6389
      - NEXT_PUBLIC_API_URL=http://192.168.50.90:6389
    networks:
      - graphiti_network
    labels:
      - "homepage.group=Knowledge Management"
      - "homepage.name=FalkorDB"
      - "homepage.icon=si-redis"
      - "homepage.href=http://192.168.50.90:3100"
      - "homepage.description=FalkorDB graph database"
  
  redisinsight:
    image: redis/redisinsight:latest
    container_name: graphiti-redisinsight
    restart: unless-stopped
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/data
    networks:
      - graphiti_network
    labels:
      - "homepage.group=Knowledge Management"
      - "homepage.name=RedisInsight"
      - "homepage.icon=si-redis"
      - "homepage.href=http://192.168.50.90:5540"
      - "homepage.description=GUI for FalkorDB graph database"
  
  graph-visualizer:
    build:
      context: ./graph-visualizer
      dockerfile: Dockerfile
    container_name: graphiti-visualizer
    restart: unless-stopped
    ports:
      - "5555:5000"
    environment:
      - FALKORDB_HOST=falkordb
      - FALKORDB_PORT=6379
      - GRAPH_NAME=graphiti_migration
    depends_on:
      - falkordb
    networks:
      - graphiti_network
    labels:
      - "homepage.group=Knowledge Management"
      - "homepage.name=Graph Visualizer"
      - "homepage.icon=mdi-graph"
      - "homepage.href=http://192.168.50.90:5555"
      - "homepage.description=Interactive graph visualization for FalkorDB"
  
  graph-visualizer-rust:
    build:
      context: ./graph-visualizer-rust
      dockerfile: Dockerfile
    container_name: graphiti-visualizer-rust
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - FALKORDB_HOST=falkordb
      - FALKORDB_PORT=6379
      - GRAPH_NAME=graphiti_migration
      - RUST_LOG=graph_visualizer=debug,tower_http=debug
    depends_on:
      - falkordb
    networks:
      - graphiti_network
    labels:
      - "homepage.group=Knowledge Management"
      - "homepage.name=Graph Visualizer (Rust)"
      - "homepage.icon=si-rust"
      - "homepage.href=http://192.168.50.90:3000"
      - "homepage.description=High-performance Rust-based graph visualization"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: graphiti-frontend
    restart: unless-stopped
    ports:
      - "8088:80"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://graph-visualizer-rust:3000
      - VITE_WS_URL=ws://graph-visualizer-rust:3000/ws
    depends_on:
      - graph-visualizer-rust
    networks:
      - graphiti_network
    labels:
      - "homepage.group=Knowledge Management"
      - "homepage.name=Graphiti Frontend"
      - "homepage.icon=si-react"
      - "homepage.href=http://192.168.50.90:8088"
      - "homepage.description=React frontend for graph visualization"

  graphiti-mcp:
    build:
      context: ./mcp_server
      dockerfile: Dockerfile
    container_name: graphiti-mcp
    restart: unless-stopped
    ports:
      - "8001:8000" # MCP Server HTTP endpoint
    environment:
      - FALKORDB_URI=falkordb://falkordb:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - MODEL_NAME=${MODEL_NAME:-qwen2.5:32b}
      - SMALL_MODEL_NAME=${SMALL_MODEL_NAME:-qwen2.5:7b}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-http://host.docker.internal:11434/v1}
      - SEMAPHORE_LIMIT=${SEMAPHORE_LIMIT:-5}
    depends_on:
      falkordb:
        condition: service_healthy
    networks:
      - graphiti_network
    labels:
      - "homepage.group=AI Services"
      - "homepage.name=Graphiti MCP Server"
      - "homepage.icon=si-openai"
      - "homepage.href=http://192.168.50.90:8001"
      - "homepage.description=Model Context Protocol server for AI assistants"
    command: ["uv", "run", "graphiti_mcp_server.py", "--transport", "sse"]

networks:
  graphiti_network:
    driver: bridge

volumes:
  neo4j_data:
  falkordb_data:
  redisinsight_data:
