graph TD
    %% V2 Data Sources
    subgraph "V2 Data Sources"
        FalkorDB[(FalkorDB<br/>Primary Graph Database)]
        PythonAPI[Python API Server<br/>port 8003<br/>Graphiti Core]
        RustBackend[Rust Backend Server<br/>port 3000<br/>Data & Visualization]
        DuckDBCache[(DuckDB Cache<br/>Arrow Tables<br/>Performance Layer)]
    end

    %% V2 Real-time Pipeline
    subgraph "V2 Notification System"
        Webhook[Webhook Trigger<br/>Python API → Rust<br/>/api/webhooks/data-ingestion]
        NotificationWS[WebSocket Notifications<br/>ws://localhost:3000/ws<br/>Notification-only (no data)]
        CacheInvalidation[Cache Invalidation<br/>Clear DuckDB & HTTP caches<br/>Force fresh data]
    end

    %% V2 Frontend Hooks
    subgraph "V2 Frontend Layer"
        useGraphDataV2[useGraphData Hook V2<br/>- HTTP API fetching<br/>- TTL caching<br/>- Manual refresh capability]
        useNotificationRefresh[useNotificationRefresh Hook<br/>- WebSocket listener<br/>- Debounced refresh<br/>- Rate limiting]
        useGraphDeltaV2[useGraphDelta Hook V2<br/>- Notification subscription<br/>- Connection management<br/>- ❌ NO delta processing]
    end

    %% V2 Data Processing
    subgraph "V2 Data Processing"
        DataTransformV2[Data Transformation V2<br/>transformNodes/transformLinks<br/>- Optimized memory usage<br/>- Single source of truth<br/>- No redundant copies]
        GraphDataManagerV2[GraphDataManager V2<br/>- Unified state management<br/>- DuckDB integration<br/>- ❌ Missing notification integration]
        BackendCaching[Backend Data Caching<br/>- HTTP response caching<br/>- Arrow table caching<br/>- Cache invalidation on updates]
    end

    %% V2 GraphCanvas Components (Current Active)
    subgraph "V2 Active Components"
        GraphCanvasV2[GraphCanvasV2.tsx<br/>✅ ACTIVE COMPONENT<br/>- Optimized architecture<br/>- Memory management<br/>- ❌ Missing notification integration]
        GraphDataManagerComp[GraphDataManager Component<br/>- Data state management<br/>- DuckDB integration<br/>- ❌ No auto-refresh]
        LazyGraphCanvas[LazyGraphCanvas.tsx<br/>- Lazy loading wrapper<br/>- Performance optimization]
    end

    %% V2 Legacy Components (Unused)
    subgraph "V2 Legacy Components (Not Used)"
        OldGraphCanvas[GraphCanvas.tsx<br/>❌ LEGACY - NOT USED<br/>- 3500+ lines<br/>- Delta processing<br/>- Memory issues]
        DeltaProcessor[DeltaProcessor.tsx<br/>❌ NOT USED<br/>- Complex delta handling<br/>- Not integrated]
    end

    %% V2 Cosmograph Integration
    subgraph "V2 Cosmograph Integration"
        CosmographDataV2[Cosmograph Data V2<br/>Optimized pointsData & linksData<br/>Single transformation]
        CosmographComponentV2[Cosmograph Component V2<br/>- Efficient rendering<br/>- Memory optimized<br/>- No incremental updates]
        DuckDBTablesV2[DuckDB Arrow Tables V2<br/>High-performance data<br/>Direct Arrow integration]
    end

    %% V2 Data Flow Connections (Working Path)
    FalkorDB --> PythonAPI
    PythonAPI --> Webhook
    Webhook --> RustBackend
    RustBackend --> DuckDBCache
    RustBackend --> CacheInvalidation
    CacheInvalidation --> NotificationWS

    %% V2 Frontend Data Flow (Working)
    RustBackend --> useGraphDataV2
    useGraphDataV2 --> DataTransformV2
    DataTransformV2 --> GraphDataManagerV2
    GraphDataManagerV2 --> GraphCanvasV2
    GraphCanvasV2 --> CosmographDataV2
    CosmographDataV2 --> CosmographComponentV2

    %% V2 Notification Flow (BROKEN)
    NotificationWS -.-> useGraphDeltaV2
    useGraphDeltaV2 -.-> useNotificationRefresh
    useNotificationRefresh -.-> useGraphDataV2

    %% V2 DuckDB Integration
    DuckDBCache --> DuckDBTablesV2
    DuckDBTablesV2 --> CosmographComponentV2

    %% V2 Key Data Structures
    subgraph "V2 Data Structures"
        NodeStructureV2[GraphNode V2<br/>- Optimized structure<br/>- Memory efficient<br/>- Single source of truth]
        LinkStructureV2[GraphLink V2<br/>- Optimized relationships<br/>- Efficient indexing<br/>- No redundant copies]
        NotificationStructure[Notification Structure<br/>- type: 'data:updated'<br/>- timestamp: number<br/>- changes: object<br/>- NO DATA PAYLOAD]
    end

    %% V2 Configuration Flow
    subgraph "V2 Configuration"
        GraphConfigV2[V2 Graph Configuration<br/>- Optimized rendering<br/>- Memory management<br/>- Performance settings]
        CosmographConfigV2[V2 Cosmograph Config<br/>- Efficient data binding<br/>- Optimized rendering<br/>- Memory leak prevention]
    end

    %% V2 Issue Indicators
    subgraph "V2 Issues (To Fix)"
        BrokenNotification[❌ BROKEN<br/>Notification → Refresh<br/>Integration Missing]
        MissingAutoRefresh[❌ MISSING<br/>Auto-refresh on<br/>Notification Receipt]
        UnusedWebSocket[❌ UNUSED<br/>WebSocket Connected<br/>But Ignored]
    end

    DataTransformV2 --> NodeStructureV2
    DataTransformV2 --> LinkStructureV2
    NodeStructureV2 --> CosmographDataV2
    LinkStructureV2 --> CosmographDataV2
    NotificationWS --> NotificationStructure
    NotificationStructure --> BrokenNotification

    GraphConfigV2 --> CosmographConfigV2
    CosmographConfigV2 --> CosmographComponentV2

    %% V2 Parent Components (Current Active)
    subgraph "V2 Active Parent Components"
        IndexPage[Index.tsx<br/>✅ ACTIVE<br/>Main application page]
        GraphViz[GraphViz.tsx<br/>✅ ACTIVE<br/>Graph visualization wrapper]
        LazyWrapper[LazyGraphCanvas.tsx<br/>✅ ACTIVE<br/>Lazy loading wrapper]
    end

    %% V2 Example Components
    subgraph "V2 Example Components"
        RefactoredExample[RefactoredGraphExample.tsx<br/>- V2 architecture demo<br/>- Advanced usage patterns]
        StaticExamples[Static Examples<br/>- Test data<br/>- Development demos]
    end

    IndexPage --> GraphViz
    GraphViz --> LazyWrapper
    LazyWrapper --> GraphCanvasV2
    RefactoredExample --> GraphCanvasV2

    %% V2 Styling
    classDef v2Active fill:#4caf50,color:#fff
    classDef v2Legacy fill:#f44336,color:#fff
    classDef v2Working fill:#2196f3,color:#fff
    classDef v2Broken fill:#ff9800,color:#fff
    classDef v2Missing fill:#9c27b0,color:#fff

    class FalkorDB,PythonAPI,RustBackend,DuckDBCache v2Working
    class Webhook,NotificationWS,CacheInvalidation v2Working
    class useGraphDataV2,GraphCanvasV2,CosmographComponentV2 v2Active
    class OldGraphCanvas,DeltaProcessor v2Legacy
    class BrokenNotification,MissingAutoRefresh,UnusedWebSocket v2Broken
    class useNotificationRefresh v2Missing

    %% Key Implementation Notes
    subgraph "Implementation Details"
        Note1[pointsData = useDuckDBTables ? <br/>duckDBData?.points : <br/>cosmographData.nodes]
        Note2[linksData = useDuckDBTables ? <br/>duckDBData?.links : <br/>cosmographData.links]
        Note3[Data flows through useEffect<br/>when nodes/links props change<br/>triggers data transformation]
        Note4[Cosmograph receives data via:<br/>points={pointsData}<br/>links={linksData}<br/>at line ~3524 in GraphCanvas.tsx]
    end

    %% Critical Data Flow Paths
    subgraph "Critical Paths"
        Path1[Path 1: JSON API → useGraphDataQuery → <br/>transformNodes/Links → cosmographData → <br/>pointsData/linksData → Cosmograph]
        Path2[Path 2: DuckDB → Arrow Tables → <br/>duckDBData → pointsData/linksData → <br/>Cosmograph (bypasses transformation)]
        Path3[Path 3: WebSocket → useGraphDelta → <br/>incremental updates → setData() → <br/>Cosmograph.setData()]
    end

    %% Memory Management
    subgraph "Memory & Performance"
        MemoryTracking[Memory Tracking<br/>- CleanupTracker<br/>- MemoryMonitor<br/>- ResourceManager]
        PerformanceMetrics[Performance Metrics<br/>- AdaptiveQuality<br/>- BatchProcessor<br/>- FPS monitoring]
        LoadingCoordinator[Loading Coordinator<br/>- Progressive loading<br/>- Stage management<br/>- Index mapping]
    end

    OptimizedCanvas --> MemoryTracking
    OptimizedCanvas --> PerformanceMetrics
    MainGraphCanvas --> LoadingCoordinator

    %% Props Interface Details
    subgraph "GraphCanvas Props Interface"
        PropsInterface[GraphCanvasComponentProps<br/>- nodes: GraphNode[]<br/>- links: GraphLink[]<br/>- selectedNodes: string[]<br/>- highlightedNodes: string[]<br/>- onNodeClick: function<br/>- onNodeSelect: function<br/>- onStatsUpdate: function]
        PropsFlow[Props → useEffect → <br/>setCurrentNodes/Links → <br/>data transformation → <br/>cosmographData state]
    end

    %% Data Transformation Pipeline
    subgraph "Transformation Pipeline"
        Step1[1. Raw API Data<br/>nodes: GraphNode[]<br/>edges: GraphLink[]]
        Step2[2. Index Mapping<br/>nodeIdToIndex Map<br/>sourceIndex/targetIndex]
        Step3[3. Property Normalization<br/>centrality metrics<br/>created_at timestamps]
        Step4[4. Cosmograph Format<br/>id, label, node_type<br/>source, target indices]
        Step5[5. Final Data<br/>pointsData & linksData<br/>ready for Cosmograph]
    end

    Step1 --> Step2
    Step2 --> Step3
    Step3 --> Step4
    Step4 --> Step5
    Step5 --> CosmographComponent

    %% Alternative Data Sources
    subgraph "Alternative Sources"
        StaticData[Static Test Data<br/>createMockNode/Link<br/>for testing]
        CachedData[Cached Data<br/>TTL-based caching<br/>in useGraphData]
        IncrementalData[Incremental Updates<br/>addNode/removeNode<br/>delta processing]
    end

    StaticData --> PropsInterface
    CachedData --> DataManager
    IncrementalData --> CosmographComponent
