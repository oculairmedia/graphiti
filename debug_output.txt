DEBUG:asyncio:Using selector: EpollSelector
INFO:graphiti_core.client_factory:Creating Cerebras LLM client with model qwen-3-coder-480b
DEBUG:cerebras.cloud.sdk._base_client:Request options: {'method': 'get', 'url': '/v1/tcp_warming', 'timeout': 1}
DEBUG:cerebras.cloud.sdk._base_client:Sending HTTP Request: GET https://api.cerebras.ai/v1/tcp_warming
DEBUG:httpcore.connection:connect_tcp.started host='api.cerebras.ai' port=443 local_address=None timeout=1 socket_options=None
DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f5653f58bd0>
DEBUG:httpcore.connection:start_tls.started ssl_context=<ssl.SSLContext object at 0x7f5654087c80> server_hostname='api.cerebras.ai' timeout=1
DEBUG:httpcore.connection:start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f565411ef10>
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'GET']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'GET']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'GET']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 21 Aug 2025 12:55:34 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'referrer-policy', b'strict-origin-when-cross-origin'), (b'x-content-type-options', b'nosniff'), (b'strict-transport-security', b'max-age=3600; includeSubDomains'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=Q4Q2XIGe7VIwpjWuJaaLTMNYjWwCXfUUrv_pPxhhW5k-1755780934-1.0.1.1-ud6iTBVquXM3m17VbIw7pQYF0dWU_sKiB7D6WFeydI7sdRzF1pjSzdefg58ZzGxSEjLWkz3kRFOdeJjb3b13uCyOEFOI_eg4HRFu4FMLZI8; path=/; expires=Thu, 21-Aug-25 13:25:34 GMT; domain=.api.cerebras.ai; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'972a49171d96aca0-YYZ'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: GET https://api.cerebras.ai/v1/tcp_warming "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'GET']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:cerebras.cloud.sdk._base_client:HTTP Response: GET https://api.cerebras.ai/v1/tcp_warming "200 OK" Headers({'date': 'Thu, 21 Aug 2025 12:55:34 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-content-type-options': 'nosniff', 'strict-transport-security': 'max-age=3600; includeSubDomains', 'cf-cache-status': 'DYNAMIC', 'set-cookie': '__cf_bm=Q4Q2XIGe7VIwpjWuJaaLTMNYjWwCXfUUrv_pPxhhW5k-1755780934-1.0.1.1-ud6iTBVquXM3m17VbIw7pQYF0dWU_sKiB7D6WFeydI7sdRzF1pjSzdefg58ZzGxSEjLWkz3kRFOdeJjb3b13uCyOEFOI_eg4HRFu4FMLZI8; path=/; expires=Thu, 21-Aug-25 13:25:34 GMT; domain=.api.cerebras.ai; HttpOnly; Secure; SameSite=None', 'server': 'cloudflare', 'cf-ray': '972a49171d96aca0-YYZ', 'alt-svc': 'h3=":443"; ma=86400'})
INFO:graphiti_core.client_factory:Creating Ollama LLM client with model gemma3:12b at http://100.81.139.20:11434/v1
INFO:graphiti_core.client_factory:Creating fallback LLM client (Cerebras primary, Ollama backup)
INFO:graphiti_core.client_factory:Using dedicated embedding endpoint: http://192.168.50.80:11434/v1
INFO:graphiti_core.client_factory:Creating Ollama embedder with model mxbai-embed-large:latest at http://192.168.50.80:11434/v1
INFO:graphiti_core.client_factory:Successfully created Ollama embedder with model: mxbai-embed-large:latest
INFO:graphiti_core.graphiti:Created EpisodicNode with group_id: debug_test_group (uuid: b4b9fc32-09f6-438f-8852-36014a7a85da)
DEBUG:cerebras.cloud.sdk._base_client:Request options: {'method': 'post', 'url': '/v1/chat/completions', 'headers': {}, 'files': None, 'idempotency_key': 'stainless-python-retry-5cdf2eb4-aec5-4671-848c-f5545f18b732', 'json_data': {'messages': [{'role': 'system', 'content': 'You are an AI assistant that extracts entity nodes from conversational messages. \n    Your primary task is to extract and classify the speaker and other significant entities mentioned in the conversation.\nDo not escape unicode characters.\n\n\nAny extracted information should be returned in the same language as it was written in.'}, {'role': 'user', 'content': '\n<PREVIOUS MESSAGES>\n[]\n</PREVIOUS MESSAGES>\n\n<CURRENT MESSAGE>\nThis is a debug test episode to verify database writes\n</CURRENT MESSAGE>\n\n<ENTITY TYPES>\n[{\'entity_type_id\': 0, \'entity_type_name\': \'Entity\', \'entity_type_description\': \'Default entity classification. Use this entity type if the entity is not one of the other listed types.\'}]\n</ENTITY TYPES>\n\nInstructions:\n\nYou are given a conversation context and a CURRENT MESSAGE. Your task is to extract **entity nodes** mentioned **explicitly or implicitly** in the CURRENT MESSAGE.\nPronoun references such as he/she/they or this/that/those should be disambiguated to the names of the \nreference entities.\n\n1. **Speaker Extraction**: Always extract the speaker (the part before the colon `:` in each dialogue line) as the first entity node.\n   - If the speaker is mentioned again in the message, treat both mentions as a **single entity**.\n\n2. **Entity Identification**:\n   - Extract all significant entities, concepts, or actors that are **explicitly or implicitly** mentioned in the CURRENT MESSAGE.\n   - **Exclude** entities mentioned only in the PREVIOUS MESSAGES (they are for context only).\n\n3. **Entity Classification**:\n   - Use the descriptions in ENTITY TYPES to classify each extracted entity.\n   - Assign the appropriate `entity_type_id` for each one.\n\n4. **Exclusions**:\n   - Do NOT extract entities representing relationships or actions.\n   - Do NOT extract dates, times, or other temporal information—these will be handled separately.\n\n5. **Formatting**:\n   - Be **explicit and unambiguous** in naming entities (e.g., use full names when available).\n\n\n\n\nRespond with a JSON object in the following format:\n\n{"$defs": {"ExtractedEntity": {"properties": {"name": {"description": "Name of the extracted entity", "title": "Name", "type": "string"}, "entity_type_id": {"description": "ID of the classified entity type. Must be one of the provided entity_type_id integers.", "title": "Entity Type Id", "type": "integer"}}, "required": ["name", "entity_type_id"], "title": "ExtractedEntity", "type": "object"}}, "properties": {"extracted_entities": {"description": "List of extracted entities", "items": {"$ref": "#/$defs/ExtractedEntity"}, "title": "Extracted Entities", "type": "array"}}, "required": ["extracted_entities"], "title": "ExtractedEntities", "type": "object"}'}], 'model': 'qwen-3-coder-480b', 'max_completion_tokens': 4000, 'response_format': {'type': 'json_schema', 'json_schema': {'name': 'extractedentities', 'strict': True, 'schema': {'$defs': {'ExtractedEntity': {'properties': {'name': {'description': 'Name of the extracted entity', 'title': 'Name', 'type': 'string'}, 'entity_type_id': {'description': 'ID of the classified entity type. Must be one of the provided entity_type_id integers.', 'title': 'Entity Type Id', 'type': 'integer'}}, 'required': ['name', 'entity_type_id'], 'title': 'ExtractedEntity', 'type': 'object', 'additionalProperties': False}}, 'properties': {'extracted_entities': {'description': 'List of extracted entities', 'items': {'$ref': '#/$defs/ExtractedEntity'}, 'title': 'Extracted Entities', 'type': 'array'}}, 'required': ['extracted_entities'], 'title': 'ExtractedEntities', 'type': 'object', 'additionalProperties': False}}}, 'temperature': 0.7, 'top_p': 0.8}}
DEBUG:cerebras.cloud.sdk._base_client:Sending HTTP Request: POST https://api.cerebras.ai/v1/chat/completions
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 21 Aug 2025 12:55:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'x-request-id', b'972a4918ffe3aca0-YYZ'), (b'x-ratelimit-limit-requests-day', b'21600'), (b'x-ratelimit-limit-tokens-minute', b'165000'), (b'x-ratelimit-remaining-requests-day', b'20975'), (b'x-ratelimit-remaining-tokens-minute', b'165000'), (b'x-ratelimit-reset-requests-day', b'39865.20693612099'), (b'x-ratelimit-reset-tokens-minute', b'25.20693612098694'), (b'inference-id', b'chatcmpl-fd79b526-7a24-4d3d-bed8-b234555bfbca'), (b'referrer-policy', b'strict-origin-when-cross-origin'), (b'x-content-type-options', b'nosniff'), (b'strict-transport-security', b'max-age=3600; includeSubDomains'), (b'cf-cache-status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'972a4918ffe3aca0-YYZ'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.cerebras.ai/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:cerebras.cloud.sdk._base_client:HTTP Response: POST https://api.cerebras.ai/v1/chat/completions "200 OK" Headers({'date': 'Thu, 21 Aug 2025 12:55:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'x-request-id': '972a4918ffe3aca0-YYZ', 'x-ratelimit-limit-requests-day': '21600', 'x-ratelimit-limit-tokens-minute': '165000', 'x-ratelimit-remaining-requests-day': '20975', 'x-ratelimit-remaining-tokens-minute': '165000', 'x-ratelimit-reset-requests-day': '39865.20693612099', 'x-ratelimit-reset-tokens-minute': '25.20693612098694', 'inference-id': 'chatcmpl-fd79b526-7a24-4d3d-bed8-b234555bfbca', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-content-type-options': 'nosniff', 'strict-transport-security': 'max-age=3600; includeSubDomains', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '972a4918ffe3aca0-YYZ', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:graphiti_core.llm_client.cerebras_client:Token usage - Prompt: 875, Completion: 37, Total: 912
DEBUG:graphiti_core.utils.maintenance.node_operations:Extracted new nodes: [ExtractedEntity(name='debug test episode', entity_type_id=0), ExtractedEntity(name='database', entity_type_id=0)] in 302.5670051574707 ms
DEBUG:graphiti_core.utils.maintenance.node_operations:Created new node: debug test episode (UUID: 4a64ebfd-cd9a-5631-817c-fc96cd8473ca)
DEBUG:graphiti_core.utils.maintenance.node_operations:Created new node: database (UUID: d071c355-d1e3-56c9-b772-27a5f899c0ff)
DEBUG:graphiti_core.utils.maintenance.node_operations:Extracted nodes: [('debug test episode', '4a64ebfd-cd9a-5631-817c-fc96cd8473ca'), ('database', 'd071c355-d1e3-56c9-b772-27a5f899c0ff')]
DEBUG:graphiti_core.utils.maintenance.node_operations:Starting serialized exact name matching for 2 nodes
DEBUG:graphiti_core.utils.maintenance.node_operations:Processing node 1/2: 'debug test episode' (group: debug_test_group)
DEBUG:cerebras.cloud.sdk._base_client:Request options: {'method': 'post', 'url': '/v1/chat/completions', 'headers': {}, 'files': None, 'idempotency_key': 'stainless-python-retry-79abdbb4-874e-4abd-80c7-36bed49f3fcb', 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert fact extractor that extracts fact triples from text. 1. Extracted fact triples should also be extracted with relevant date information.2. Treat the CURRENT TIME as the time the CURRENT MESSAGE was sent. All temporal information should be extracted relative to this time.\nDo not escape unicode characters.\n\n\nAny extracted information should be returned in the same language as it was written in.'}, {'role': 'user', 'content': '\n<PREVIOUS_MESSAGES>\n[]\n</PREVIOUS_MESSAGES>\n\n<CURRENT_MESSAGE>\nThis is a debug test episode to verify database writes\n</CURRENT_MESSAGE>\n\n<ENTITIES>\n[{\'id\': 0, \'name\': \'debug test episode\', \'entity_types\': [\'Entity\']}, {\'id\': 1, \'name\': \'database\', \'entity_types\': [\'Entity\']}] \n</ENTITIES>\n\n<REFERENCE_TIME>\n2025-08-21 08:55:34.540501  # ISO 8601 (UTC); used to resolve relative time mentions\n</REFERENCE_TIME>\n\n<FACT TYPES>\n[]\n</FACT TYPES>\n\n# TASK\nExtract all factual relationships between the given ENTITIES based on the CURRENT MESSAGE.\nOnly extract facts that:\n- involve two DISTINCT ENTITIES from the ENTITIES list,\n- are clearly stated or unambiguously implied in the CURRENT MESSAGE,\n    and can be represented as edges in a knowledge graph.\n- The FACT TYPES provide a list of the most important types of facts, make sure to extract facts of these types\n- The FACT TYPES are not an exhaustive list, extract all facts from the message even if they do not fit into one\n    of the FACT TYPES\n- The FACT TYPES each contain their fact_type_signature which represents the source and target entity types.\n\nYou may use information from the PREVIOUS MESSAGES only to disambiguate references or support continuity.\n\n\n\n\n# EXTRACTION RULES\n\n1. Only emit facts where both the subject and object match IDs in ENTITIES.\n2. Each fact must involve two **distinct** entities.\n3. Use a SCREAMING_SNAKE_CASE string as the `relation_type` (e.g., FOUNDED, WORKS_AT).\n4. Do not emit duplicate or semantically redundant facts.\n5. The `fact_text` should quote or closely paraphrase the original source sentence(s).\n6. Use `REFERENCE_TIME` to resolve vague or relative temporal expressions (e.g., "last week").\n7. Do **not** hallucinate or infer temporal bounds from unrelated events.\n\n# DATETIME RULES\n\n- Use ISO 8601 with “Z” suffix (UTC) (e.g., 2025-04-30T00:00:00Z).\n- If the fact is ongoing (present tense), set `valid_at` to REFERENCE_TIME.\n- If a change/termination is expressed, set `invalid_at` to the relevant timestamp.\n- Leave both fields `null` if no explicit or resolvable time is stated.\n- If only a date is mentioned (no time), assume 00:00:00.\n- If only a year is mentioned, use January 1st at 00:00:00.\n        \n\nRespond with a JSON object in the following format:\n\n{"$defs": {"Edge": {"properties": {"relation_type": {"description": "FACT_PREDICATE_IN_SCREAMING_SNAKE_CASE", "title": "Relation Type", "type": "string"}, "source_entity_id": {"description": "The id of the source entity of the fact.", "title": "Source Entity Id", "type": "integer"}, "target_entity_id": {"description": "The id of the target entity of the fact.", "title": "Target Entity Id", "type": "integer"}, "fact": {"description": "", "title": "Fact", "type": "string"}, "valid_at": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The date and time when the relationship described by the edge fact became true or was established. Use ISO 8601 format (YYYY-MM-DDTHH:MM:SS.SSSSSSZ)", "title": "Valid At"}, "invalid_at": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The date and time when the relationship described by the edge fact stopped being true or ended. Use ISO 8601 format (YYYY-MM-DDTHH:MM:SS.SSSSSSZ)", "title": "Invalid At"}}, "required": ["relation_type", "source_entity_id", "target_entity_id", "fact"], "title": "Edge", "type": "object"}}, "properties": {"edges": {"items": {"$ref": "#/$defs/Edge"}, "title": "Edges", "type": "array"}}, "required": ["edges"], "title": "ExtractedEdges", "type": "object"}'}], 'model': 'qwen-3-coder-480b', 'max_completion_tokens': 16384, 'response_format': {'type': 'json_schema', 'json_schema': {'name': 'extractededges', 'strict': True, 'schema': {'$defs': {'Edge': {'properties': {'relation_type': {'description': 'FACT_PREDICATE_IN_SCREAMING_SNAKE_CASE', 'title': 'Relation Type', 'type': 'string'}, 'source_entity_id': {'description': 'The id of the source entity of the fact.', 'title': 'Source Entity Id', 'type': 'integer'}, 'target_entity_id': {'description': 'The id of the target entity of the fact.', 'title': 'Target Entity Id', 'type': 'integer'}, 'fact': {'description': '', 'title': 'Fact', 'type': 'string'}, 'valid_at': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'The date and time when the relationship described by the edge fact became true or was established. Use ISO 8601 format (YYYY-MM-DDTHH:MM:SS.SSSSSSZ)', 'title': 'Valid At'}, 'invalid_at': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'The date and time when the relationship described by the edge fact stopped being true or ended. Use ISO 8601 format (YYYY-MM-DDTHH:MM:SS.SSSSSSZ)', 'title': 'Invalid At'}}, 'required': ['relation_type', 'source_entity_id', 'target_entity_id', 'fact', 'valid_at', 'invalid_at'], 'title': 'Edge', 'type': 'object', 'additionalProperties': False}}, 'properties': {'edges': {'items': {'$ref': '#/$defs/Edge'}, 'title': 'Edges', 'type': 'array'}}, 'required': ['edges'], 'title': 'ExtractedEdges', 'type': 'object', 'additionalProperties': False}}}, 'temperature': 0.7, 'top_p': 0.8}}
DEBUG:graphiti_core.utils.maintenance.node_operations:No exact or fuzzy match found for 'debug test episode' - will be created as new node
DEBUG:cerebras.cloud.sdk._base_client:Sending HTTP Request: POST https://api.cerebras.ai/v1/chat/completions
DEBUG:graphiti_core.utils.maintenance.node_operations:Processing node 2/2: 'database' (group: debug_test_group)
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:graphiti_core.utils.maintenance.node_operations:No exact or fuzzy match found for 'database' - will be created as new node
DEBUG:graphiti_core.utils.maintenance.node_operations:Serialized processing complete: 0 resolved, 2 need LLM resolution
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-619ed7d7-6d5a-4419-a3c4-edf4908ae64a', 'post_parser': <function AsyncEmbeddings.create.<locals>.parser at 0x7f5653c61c60>, 'json_data': {'input': ['debug test episode'], 'model': 'mxbai-embed-large:latest', 'encoding_format': 'base64'}}
DEBUG:openai._base_client:Sending HTTP Request: POST http://192.168.50.80:11434/v1/embeddings
DEBUG:httpcore.connection:connect_tcp.started host='192.168.50.80' port=11434 local_address=None timeout=5.0 socket_options=None
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a0f1066c-dc0e-47ce-8f69-8e3318b462a5', 'post_parser': <function AsyncEmbeddings.create.<locals>.parser at 0x7f56528bfba0>, 'json_data': {'input': ['database'], 'model': 'mxbai-embed-large:latest', 'encoding_format': 'base64'}}
DEBUG:openai._base_client:Sending HTTP Request: POST http://192.168.50.80:11434/v1/embeddings
DEBUG:httpcore.connection:connect_tcp.started host='192.168.50.80' port=11434 local_address=None timeout=5.0 socket_options=None
DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f56528e9a50>
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f5651f496d0>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): us.i.posthog.com:443
DEBUG:urllib3.util.retry:Incremented Retry for (url='/batch/'): Retry(total=1, connect=1, read=2, redirect=None, status=None)
WARNING:urllib3.connectionpool:Retrying (Retry(total=1, connect=1, read=2, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f5651f4b6d0>: Failed to establish a new connection: [Errno 111] Connection refused')': /batch/
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (2): us.i.posthog.com:443
DEBUG:urllib3.util.retry:Incremented Retry for (url='/batch/'): Retry(total=0, connect=0, read=2, redirect=None, status=None)
WARNING:urllib3.connectionpool:Retrying (Retry(total=0, connect=0, read=2, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f5651f4cc50>: Failed to establish a new connection: [Errno 111] Connection refused')': /batch/
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (3): us.i.posthog.com:443
INFO:backoff:Backing off send_request(...) for 0.5s (requests.exceptions.ConnectionError: HTTPSConnectionPool(host='us.i.posthog.com', port=443): Max retries exceeded with url: /batch/ (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f5651f4d750>: Failed to establish a new connection: [Errno 111] Connection refused')))
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json'), (b'Date', b'Thu, 21 Aug 2025 12:55:35 GMT'), (b'Transfer-Encoding', b'chunked')])
INFO:httpx:HTTP Request: POST http://192.168.50.80:11434/v1/embeddings "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST http://192.168.50.80:11434/v1/embeddings "200 OK" Headers({'content-type': 'application/json', 'date': 'Thu, 21 Aug 2025 12:55:35 GMT', 'transfer-encoding': 'chunked'})
DEBUG:openai._base_client:request_id: None
DEBUG:graphiti_core.search.search:search returned context for query debug test episode in 236.59229278564453 ms
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json'), (b'Date', b'Thu, 21 Aug 2025 12:55:35 GMT'), (b'Transfer-Encoding', b'chunked')])
INFO:httpx:HTTP Request: POST http://192.168.50.80:11434/v1/embeddings "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST http://192.168.50.80:11434/v1/embeddings "200 OK" Headers({'content-type': 'application/json', 'date': 'Thu, 21 Aug 2025 12:55:35 GMT', 'transfer-encoding': 'chunked'})
DEBUG:openai._base_client:request_id: None
DEBUG:graphiti_core.search.search:search returned context for query database in 101.05156898498535 ms
DEBUG:cerebras.cloud.sdk._base_client:Request options: {'method': 'post', 'url': '/v1/chat/completions', 'headers': {}, 'files': None, 'idempotency_key': 'stainless-python-retry-0c76c4d5-34a9-4b7b-8246-f47578ef205a', 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant that determines whether or not ENTITIES extracted from a conversation are duplicatesof existing entities.\nDo not escape unicode characters.\n\n\nAny extracted information should be returned in the same language as it was written in.'}, {'role': 'user', 'content': '\n        <PREVIOUS MESSAGES>\n        []\n        </PREVIOUS MESSAGES>\n        <CURRENT MESSAGE>\n        This is a debug test episode to verify database writes\n        </CURRENT MESSAGE>\n        \n        \n        Each of the following ENTITIES were extracted from the CURRENT MESSAGE.\n        Each entity in ENTITIES is represented as a JSON object with the following structure:\n        {\n            id: integer id of the entity,\n            name: "name of the entity",\n            entity_type: "ontological classification of the entity",\n            entity_type_description: "Description of what the entity type represents",\n            duplication_candidates: [\n                {\n                    idx: integer index of the candidate entity,\n                    name: "name of the candidate entity",\n                    entity_type: "ontological classification of the candidate entity",\n                    ...<additional attributes>\n                }\n            ]\n        }\n        \n        <ENTITIES>\n        [\n  {\n    "id": 0,\n    "name": "debug test episode",\n    "entity_type": [\n      "Entity"\n    ],\n    "entity_type_description": "Default Entity Type"\n  },\n  {\n    "id": 1,\n    "name": "database",\n    "entity_type": [\n      "Entity"\n    ],\n    "entity_type_description": "Default Entity Type"\n  }\n]\n        </ENTITIES>\n        \n        <EXISTING ENTITIES>\n        [\n  []\n]\n        </EXISTING ENTITIES>\n\n        For each of the above ENTITIES, determine if the entity is a duplicate of any of the EXISTING ENTITIES.\n\n        Entities should only be considered duplicates if they refer to the *same real-world object or concept*.\n\n        Do NOT mark entities as duplicates if:\n        - They are related but distinct.\n        - They have similar names or purposes but refer to separate instances or concepts.\n\n        Task:\n        Your response will be a list called entity_resolutions which contains one entry for each entity.\n        \n        For each entity, return the id of the entity as id, the name of the entity as name, and the duplicate_idx\n        as an integer.\n        \n        - If an entity is a duplicate of one of the EXISTING ENTITIES, return the idx of the candidate it is a \n        duplicate of.\n        - If an entity is not a duplicate of one of the EXISTING ENTITIES, return the -1 as the duplication_idx\n        \n\nRespond with a JSON object in the following format:\n\n{"$defs": {"NodeDuplicate": {"properties": {"id": {"description": "integer id of the entity", "title": "Id", "type": "integer"}, "duplicate_idx": {"description": "idx of the duplicate entity. If no duplicate entities are found, default to -1.", "title": "Duplicate Idx", "type": "integer"}, "name": {"description": "Name of the entity. Should be the most complete and descriptive name of the entity. Do not include any JSON formatting in the Entity name such as {}.", "title": "Name", "type": "string"}, "duplicates": {"description": "idx of all duplicate entities.", "items": {"type": "integer"}, "title": "Duplicates", "type": "array"}}, "required": ["id", "duplicate_idx", "name", "duplicates"], "title": "NodeDuplicate", "type": "object"}}, "properties": {"entity_resolutions": {"description": "List of resolved nodes", "items": {"$ref": "#/$defs/NodeDuplicate"}, "title": "Entity Resolutions", "type": "array"}}, "required": ["entity_resolutions"], "title": "NodeResolutions", "type": "object"}'}], 'model': 'qwen-3-coder-480b', 'max_completion_tokens': 4000, 'response_format': {'type': 'json_schema', 'json_schema': {'name': 'noderesolutions', 'strict': True, 'schema': {'$defs': {'NodeDuplicate': {'properties': {'id': {'description': 'integer id of the entity', 'title': 'Id', 'type': 'integer'}, 'duplicate_idx': {'description': 'idx of the duplicate entity. If no duplicate entities are found, default to -1.', 'title': 'Duplicate Idx', 'type': 'integer'}, 'name': {'description': 'Name of the entity. Should be the most complete and descriptive name of the entity. Do not include any JSON formatting in the Entity name such as {}.', 'title': 'Name', 'type': 'string'}, 'duplicates': {'description': 'idx of all duplicate entities.', 'items': {'type': 'integer'}, 'title': 'Duplicates', 'type': 'array'}}, 'required': ['id', 'duplicate_idx', 'name', 'duplicates'], 'title': 'NodeDuplicate', 'type': 'object', 'additionalProperties': False}}, 'properties': {'entity_resolutions': {'description': 'List of resolved nodes', 'items': {'$ref': '#/$defs/NodeDuplicate'}, 'title': 'Entity Resolutions', 'type': 'array'}}, 'required': ['entity_resolutions'], 'title': 'NodeResolutions', 'type': 'object', 'additionalProperties': False}}}, 'temperature': 0.7, 'top_p': 0.8}}
DEBUG:cerebras.cloud.sdk._base_client:Sending HTTP Request: POST https://api.cerebras.ai/v1/chat/completions
DEBUG:httpcore.connection:connect_tcp.started host='api.cerebras.ai' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f5651fa0590>
DEBUG:httpcore.connection:start_tls.started ssl_context=<ssl.SSLContext object at 0x7f5654087c80> server_hostname='api.cerebras.ai' timeout=5.0
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 21 Aug 2025 12:55:35 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'x-request-id', b'972a491adaf2aca0-YYZ'), (b'x-ratelimit-limit-requests-day', b'21600'), (b'x-ratelimit-limit-tokens-minute', b'165000'), (b'x-ratelimit-remaining-requests-day', b'20974'), (b'x-ratelimit-remaining-tokens-minute', b'164088'), (b'x-ratelimit-reset-requests-day', b'39864.91012811661'), (b'x-ratelimit-reset-tokens-minute', b'24.910128116607666'), (b'inference-id', b'chatcmpl-aa7fe60e-a02c-4fa4-87bd-4c0cda8c4c43'), (b'referrer-policy', b'strict-origin-when-cross-origin'), (b'x-content-type-options', b'nosniff'), (b'strict-transport-security', b'max-age=3600; includeSubDomains'), (b'cf-cache-status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'972a491adaf2aca0-YYZ'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.cerebras.ai/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:cerebras.cloud.sdk._base_client:HTTP Response: POST https://api.cerebras.ai/v1/chat/completions "200 OK" Headers({'date': 'Thu, 21 Aug 2025 12:55:35 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'x-request-id': '972a491adaf2aca0-YYZ', 'x-ratelimit-limit-requests-day': '21600', 'x-ratelimit-limit-tokens-minute': '165000', 'x-ratelimit-remaining-requests-day': '20974', 'x-ratelimit-remaining-tokens-minute': '164088', 'x-ratelimit-reset-requests-day': '39864.91012811661', 'x-ratelimit-reset-tokens-minute': '24.910128116607666', 'inference-id': 'chatcmpl-aa7fe60e-a02c-4fa4-87bd-4c0cda8c4c43', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-content-type-options': 'nosniff', 'strict-transport-security': 'max-age=3600; includeSubDomains', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '972a491adaf2aca0-YYZ', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:graphiti_core.llm_client.cerebras_client:Token usage - Prompt: 1529, Completion: 81, Total: 1610
DEBUG:graphiti_core.utils.maintenance.edge_operations:Extracted new edges: [{'relation_type': 'VERIFIES', 'source_entity_id': 0, 'target_entity_id': 1, 'fact': 'debug test episode to verify database writes', 'valid_at': '2025-08-21T08:55:34.540501Z', 'invalid_at': None}] in 288.6817455291748 ms
DEBUG:graphiti_core.utils.maintenance.edge_operations:Created new edge: VERIFIES from (UUID: 4a64ebfd-cd9a-5631-817c-fc96cd8473ca) to (UUID: d071c355-d1e3-56c9-b772-27a5f899c0ff)
DEBUG:graphiti_core.utils.maintenance.edge_operations:Extracted edges: [('VERIFIES', 'f49c359f-07c5-434f-9c27-f8fbc65ec09c')]
DEBUG:httpcore.connection:start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f5653cbc910>
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 21 Aug 2025 12:55:35 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'x-request-id', b'972a491ccc8aebb6-YYZ'), (b'x-ratelimit-limit-requests-day', b'21600'), (b'x-ratelimit-limit-tokens-minute', b'165000'), (b'x-ratelimit-remaining-requests-day', b'20973'), (b'x-ratelimit-remaining-tokens-minute', b'162478'), (b'x-ratelimit-reset-requests-day', b'39864.59985637665'), (b'x-ratelimit-reset-tokens-minute', b'24.59985637664795'), (b'inference-id', b'chatcmpl-86ab3abf-9e27-43dc-b23c-076c272c94e1'), (b'referrer-policy', b'strict-origin-when-cross-origin'), (b'x-content-type-options', b'nosniff'), (b'strict-transport-security', b'max-age=3600; includeSubDomains'), (b'cf-cache-status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'972a491ccc8aebb6-YYZ'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.cerebras.ai/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:cerebras.cloud.sdk._base_client:HTTP Response: POST https://api.cerebras.ai/v1/chat/completions "200 OK" Headers({'date': 'Thu, 21 Aug 2025 12:55:35 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'x-request-id': '972a491ccc8aebb6-YYZ', 'x-ratelimit-limit-requests-day': '21600', 'x-ratelimit-limit-tokens-minute': '165000', 'x-ratelimit-remaining-requests-day': '20973', 'x-ratelimit-remaining-tokens-minute': '162478', 'x-ratelimit-reset-requests-day': '39864.59985637665', 'x-ratelimit-reset-tokens-minute': '24.59985637664795', 'inference-id': 'chatcmpl-86ab3abf-9e27-43dc-b23c-076c272c94e1', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-content-type-options': 'nosniff', 'strict-transport-security': 'max-age=3600; includeSubDomains', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '972a491ccc8aebb6-YYZ', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:graphiti_core.llm_client.cerebras_client:Token usage - Prompt: 1166, Completion: 61, Total: 1227
WARNING:graphiti_core.utils.maintenance.node_operations:Invalid duplicate index -1 for existing_nodes of length 0. Using resolved_node instead.
WARNING:graphiti_core.utils.maintenance.node_operations:Invalid duplicate index -1 for existing_nodes of length 0. Using resolved_node instead.
DEBUG:graphiti_core.utils.maintenance.node_operations:Resolved nodes: [('debug test episode', '4a64ebfd-cd9a-5631-817c-fc96cd8473ca'), ('database', 'd071c355-d1e3-56c9-b772-27a5f899c0ff')]
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-64f14c1b-d955-48f3-8549-ad16d89b9cba', 'post_parser': <function AsyncEmbeddings.create.<locals>.parser at 0x7f5653c62200>, 'json_data': {'input': ['debug test episode to verify database writes'], 'model': 'mxbai-embed-large:latest', 'encoding_format': 'base64'}}
DEBUG:openai._base_client:Sending HTTP Request: POST http://192.168.50.80:11434/v1/embeddings
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:cerebras.cloud.sdk._base_client:Request options: {'method': 'post', 'url': '/v1/chat/completions', 'headers': {}, 'files': None, 'idempotency_key': 'stainless-python-retry-409be04a-7093-47ce-937e-325df6211f3e', 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant that extracts entity properties from the provided text.\nDo not escape unicode characters.\n\n\nAny extracted information should be returned in the same language as it was written in.'}, {'role': 'user', 'content': '\n\n        <MESSAGES>\n        []\n        "This is a debug test episode to verify database writes"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {\'name\': \'debug test episode\', \'summary\': \'\', \'entity_types\': [\'Entity\'], \'attributes\': {}}\n        </ENTITY>\n        \n\nRespond with a JSON object in the following format:\n\n{"properties": {"summary": {"description": "Summary containing the important information about the entity. Under 250 words", "title": "Summary", "type": "string"}}, "required": ["summary"], "title": "EntityAttributes_16aeeb69cc3e443bb495e6f830077843", "type": "object"}'}], 'model': 'qwen-3-coder-480b', 'max_completion_tokens': 4000, 'response_format': {'type': 'json_schema', 'json_schema': {'name': 'entityattributes_16aeeb69cc3e443bb495e6f830077843', 'strict': True, 'schema': {'properties': {'summary': {'description': 'Summary containing the important information about the entity. Under 250 words', 'title': 'Summary', 'type': 'string'}}, 'required': ['summary'], 'title': 'EntityAttributes_16aeeb69cc3e443bb495e6f830077843', 'type': 'object', 'additionalProperties': False}}}, 'temperature': 0.7, 'top_p': 0.8}}
DEBUG:cerebras.cloud.sdk._base_client:Request options: {'method': 'post', 'url': '/v1/chat/completions', 'headers': {}, 'files': None, 'idempotency_key': 'stainless-python-retry-91dfd7df-22b4-43eb-938c-0c9f860d7eac', 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant that extracts entity properties from the provided text.\nDo not escape unicode characters.\n\n\nAny extracted information should be returned in the same language as it was written in.'}, {'role': 'user', 'content': '\n\n        <MESSAGES>\n        []\n        "This is a debug test episode to verify database writes"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {\'name\': \'database\', \'summary\': \'\', \'entity_types\': [\'Entity\'], \'attributes\': {}}\n        </ENTITY>\n        \n\nRespond with a JSON object in the following format:\n\n{"properties": {"summary": {"description": "Summary containing the important information about the entity. Under 250 words", "title": "Summary", "type": "string"}}, "required": ["summary"], "title": "EntityAttributes_02b0d7c7d66b4dd390d3590a7729e7cd", "type": "object"}'}], 'model': 'qwen-3-coder-480b', 'max_completion_tokens': 4000, 'response_format': {'type': 'json_schema', 'json_schema': {'name': 'entityattributes_02b0d7c7d66b4dd390d3590a7729e7cd', 'strict': True, 'schema': {'properties': {'summary': {'description': 'Summary containing the important information about the entity. Under 250 words', 'title': 'Summary', 'type': 'string'}}, 'required': ['summary'], 'title': 'EntityAttributes_02b0d7c7d66b4dd390d3590a7729e7cd', 'type': 'object', 'additionalProperties': False}}}, 'temperature': 0.7, 'top_p': 0.8}}
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:cerebras.cloud.sdk._base_client:Sending HTTP Request: POST https://api.cerebras.ai/v1/chat/completions
DEBUG:cerebras.cloud.sdk._base_client:Sending HTTP Request: POST https://api.cerebras.ai/v1/chat/completions
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json'), (b'Date', b'Thu, 21 Aug 2025 12:55:35 GMT'), (b'Transfer-Encoding', b'chunked')])
INFO:httpx:HTTP Request: POST http://192.168.50.80:11434/v1/embeddings "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST http://192.168.50.80:11434/v1/embeddings "200 OK" Headers({'content-type': 'application/json', 'date': 'Thu, 21 Aug 2025 12:55:35 GMT', 'transfer-encoding': 'chunked'})
DEBUG:openai._base_client:request_id: None
DEBUG:graphiti_core.utils.maintenance.edge_operations:Related edges lists: []
DEBUG:graphiti_core.utils.maintenance.edge_operations:Resolved edges: [('VERIFIES', 'f49c359f-07c5-434f-9c27-f8fbc65ec09c')]
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9a7d206c-19f5-42bd-9233-a8cfbea93109', 'post_parser': <function AsyncEmbeddings.create.<locals>.parser at 0x7f5651f43ba0>, 'json_data': {'input': ['debug test episode to verify database writes'], 'model': 'mxbai-embed-large:latest', 'encoding_format': 'base64'}}
DEBUG:openai._base_client:Sending HTTP Request: POST http://192.168.50.80:11434/v1/embeddings
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json'), (b'Date', b'Thu, 21 Aug 2025 12:55:35 GMT'), (b'Transfer-Encoding', b'chunked')])
INFO:httpx:HTTP Request: POST http://192.168.50.80:11434/v1/embeddings "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST http://192.168.50.80:11434/v1/embeddings "200 OK" Headers({'content-type': 'application/json', 'date': 'Thu, 21 Aug 2025 12:55:35 GMT', 'transfer-encoding': 'chunked'})
DEBUG:openai._base_client:request_id: None
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (4): us.i.posthog.com:443
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Thu, 21 Aug 2025 12:55:35 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'155'), (b'Connection', b'keep-alive'), (b'CF-RAY', b'972a491ec87caca0-YYZ'), (b'retry-after-ms', b'660'), (b'referrer-policy', b'strict-origin-when-cross-origin'), (b'x-content-type-options', b'nosniff'), (b'strict-transport-security', b'max-age=3600; includeSubDomains'), (b'cf-cache-status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.cerebras.ai/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:cerebras.cloud.sdk._base_client:HTTP Response: POST https://api.cerebras.ai/v1/chat/completions "429 Too Many Requests" Headers({'date': 'Thu, 21 Aug 2025 12:55:35 GMT', 'content-type': 'application/json', 'content-length': '155', 'connection': 'keep-alive', 'cf-ray': '972a491ec87caca0-YYZ', 'retry-after-ms': '660', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-content-type-options': 'nosniff', 'strict-transport-security': 'max-age=3600; includeSubDomains', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:cerebras.cloud.sdk._base_client:Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/cerebras/cloud/sdk/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/usr/local/lib/python3.11/dist-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.cerebras.ai/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
DEBUG:cerebras.cloud.sdk._base_client:Retrying due to status code 429
DEBUG:cerebras.cloud.sdk._base_client:2 retries left
INFO:cerebras.cloud.sdk._base_client:Retrying request to /v1/chat/completions in 0.660000 seconds
DEBUG:urllib3.connectionpool:https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 21 Aug 2025 12:55:36 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'x-request-id', b'972a491edc4aebb6-YYZ'), (b'x-ratelimit-limit-requests-day', b'21600'), (b'x-ratelimit-limit-tokens-minute', b'165000'), (b'x-ratelimit-remaining-requests-day', b'20972'), (b'x-ratelimit-remaining-tokens-minute', b'161251'), (b'x-ratelimit-reset-requests-day', b'39863.73379921913'), (b'x-ratelimit-reset-tokens-minute', b'23.73379921913147'), (b'inference-id', b'chatcmpl-203537d0-03fc-40c4-a924-e1c4cfb7025b'), (b'referrer-policy', b'strict-origin-when-cross-origin'), (b'x-content-type-options', b'nosniff'), (b'strict-transport-security', b'max-age=3600; includeSubDomains'), (b'cf-cache-status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'972a491edc4aebb6-YYZ'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.cerebras.ai/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:cerebras.cloud.sdk._base_client:HTTP Response: POST https://api.cerebras.ai/v1/chat/completions "200 OK" Headers({'date': 'Thu, 21 Aug 2025 12:55:36 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'x-request-id': '972a491edc4aebb6-YYZ', 'x-ratelimit-limit-requests-day': '21600', 'x-ratelimit-limit-tokens-minute': '165000', 'x-ratelimit-remaining-requests-day': '20972', 'x-ratelimit-remaining-tokens-minute': '161251', 'x-ratelimit-reset-requests-day': '39863.73379921913', 'x-ratelimit-reset-tokens-minute': '23.73379921913147', 'inference-id': 'chatcmpl-203537d0-03fc-40c4-a924-e1c4cfb7025b', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-content-type-options': 'nosniff', 'strict-transport-security': 'max-age=3600; includeSubDomains', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '972a491edc4aebb6-YYZ', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:graphiti_core.llm_client.cerebras_client:Token usage - Prompt: 540, Completion: 16, Total: 556
DEBUG:cerebras.cloud.sdk._base_client:Request options: {'method': 'post', 'url': '/v1/chat/completions', 'headers': {}, 'files': None, 'idempotency_key': 'stainless-python-retry-409be04a-7093-47ce-937e-325df6211f3e', 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant that extracts entity properties from the provided text.\nDo not escape unicode characters.\n\n\nAny extracted information should be returned in the same language as it was written in.'}, {'role': 'user', 'content': '\n\n        <MESSAGES>\n        []\n        "This is a debug test episode to verify database writes"\n        </MESSAGES>\n\n        Given the above MESSAGES and the following ENTITY, update any of its attributes based on the information provided\n        in MESSAGES. Use the provided attribute descriptions to better understand how each attribute should be determined.\n\n        Guidelines:\n        1. Do not hallucinate entity property values if they cannot be found in the current context.\n        2. Only use the provided MESSAGES and ENTITY to set attribute values.\n        3. The summary attribute represents a summary of the ENTITY, and should be updated with new information about the Entity from the MESSAGES. \n            Summaries must be no longer than 250 words.\n        \n        <ENTITY>\n        {\'name\': \'debug test episode\', \'summary\': \'\', \'entity_types\': [\'Entity\'], \'attributes\': {}}\n        </ENTITY>\n        \n\nRespond with a JSON object in the following format:\n\n{"properties": {"summary": {"description": "Summary containing the important information about the entity. Under 250 words", "title": "Summary", "type": "string"}}, "required": ["summary"], "title": "EntityAttributes_16aeeb69cc3e443bb495e6f830077843", "type": "object"}'}], 'model': 'qwen-3-coder-480b', 'max_completion_tokens': 4000, 'response_format': {'type': 'json_schema', 'json_schema': {'name': 'entityattributes_16aeeb69cc3e443bb495e6f830077843', 'strict': True, 'schema': {'properties': {'summary': {'description': 'Summary containing the important information about the entity. Under 250 words', 'title': 'Summary', 'type': 'string'}}, 'required': ['summary'], 'title': 'EntityAttributes_16aeeb69cc3e443bb495e6f830077843', 'type': 'object', 'additionalProperties': False}}}, 'temperature': 0.7, 'top_p': 0.8}}
DEBUG:cerebras.cloud.sdk._base_client:Sending HTTP Request: POST https://api.cerebras.ai/v1/chat/completions
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 21 Aug 2025 12:55:37 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'x-request-id', b'972a492488ddaca0-YYZ'), (b'x-ratelimit-limit-requests-day', b'21600'), (b'x-ratelimit-limit-tokens-minute', b'165000'), (b'x-ratelimit-remaining-requests-day', b'20971'), (b'x-ratelimit-remaining-tokens-minute', b'160695'), (b'x-ratelimit-reset-requests-day', b'39862.75334405899'), (b'x-ratelimit-reset-tokens-minute', b'22.75334405899048'), (b'inference-id', b'chatcmpl-b45fb9ab-c7fb-4683-a3e5-f4868510e21b'), (b'referrer-policy', b'strict-origin-when-cross-origin'), (b'x-content-type-options', b'nosniff'), (b'strict-transport-security', b'max-age=3600; includeSubDomains'), (b'cf-cache-status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'972a492488ddaca0-YYZ'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.cerebras.ai/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:cerebras.cloud.sdk._base_client:HTTP Response: POST https://api.cerebras.ai/v1/chat/completions "200 OK" Headers({'date': 'Thu, 21 Aug 2025 12:55:37 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'x-request-id': '972a492488ddaca0-YYZ', 'x-ratelimit-limit-requests-day': '21600', 'x-ratelimit-limit-tokens-minute': '165000', 'x-ratelimit-remaining-requests-day': '20971', 'x-ratelimit-remaining-tokens-minute': '160695', 'x-ratelimit-reset-requests-day': '39862.75334405899', 'x-ratelimit-reset-tokens-minute': '22.75334405899048', 'inference-id': 'chatcmpl-b45fb9ab-c7fb-4683-a3e5-f4868510e21b', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-content-type-options': 'nosniff', 'strict-transport-security': 'max-age=3600; includeSubDomains', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '972a492488ddaca0-YYZ', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:graphiti_core.llm_client.cerebras_client:Token usage - Prompt: 539, Completion: 21, Total: 560
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b8c9cf4c-9738-423d-9530-867b0f4a39dc', 'post_parser': <function AsyncEmbeddings.create.<locals>.parser at 0x7f5651f43ba0>, 'json_data': {'input': ['debug test episode', 'database'], 'model': 'mxbai-embed-large:latest', 'encoding_format': 'base64'}}
DEBUG:openai._base_client:Sending HTTP Request: POST http://192.168.50.80:11434/v1/embeddings
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json'), (b'Date', b'Thu, 21 Aug 2025 12:55:37 GMT'), (b'Transfer-Encoding', b'chunked')])
INFO:httpx:HTTP Request: POST http://192.168.50.80:11434/v1/embeddings "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST http://192.168.50.80:11434/v1/embeddings "200 OK" Headers({'content-type': 'application/json', 'date': 'Thu, 21 Aug 2025 12:55:37 GMT', 'transfer-encoding': 'chunked'})
DEBUG:openai._base_client:request_id: None
DEBUG:graphiti_core.utils.maintenance.edge_operations:Built episodic edges: [EpisodicEdge(uuid='aeca81de-ca1c-4cc8-ab91-66ba6a2d35eb', group_id='debug_test_group', source_node_uuid='b4b9fc32-09f6-438f-8852-36014a7a85da', target_node_uuid='4a64ebfd-cd9a-5631-817c-fc96cd8473ca', created_at=datetime.datetime(2025, 8, 21, 12, 55, 34, 540512, tzinfo=datetime.timezone.utc)), EpisodicEdge(uuid='98f0129a-1264-4842-9cfe-7b5b33b39ace', group_id='debug_test_group', source_node_uuid='b4b9fc32-09f6-438f-8852-36014a7a85da', target_node_uuid='d071c355-d1e3-56c9-b772-27a5f899c0ff', created_at=datetime.datetime(2025, 8, 21, 12, 55, 34, 540512, tzinfo=datetime.timezone.utc))]
INFO:graphiti_core.utils.bulk_utils:Preparing 1 episodes for bulk save
INFO:graphiti_core.utils.bulk_utils:Sample episode keys: ['uuid', 'name', 'group_id', 'labels', 'created_at', 'source', 'source_description', 'content', 'valid_at', 'entity_edges']
INFO:graphiti_core.utils.bulk_utils:Sample episode group_id: debug_test_group
INFO:graphiti_core.utils.bulk_utils:Sample episode data: {'uuid': 'b4b9fc32-09f6-438f-8852-36014a7a85da', 'name': 'Debug Test Episode', 'group_id': 'debug_test_group', 'labels': [], 'created_at': '2025-08-21T12:55:34.540512+00:00', 'source': 'message', 'source_description': 'Direct debug test', 'content': 'This is a debug test episode to verify database writes', 'valid_at': '2025-08-21T08:55:34.540501', 'entity_edges': ['f49c359f-07c5-434f-9c27-f8fbc65ec09c']}
INFO:graphiti_core.utils.bulk_utils:About to execute EPISODIC_NODE_SAVE_BULK with 1 episodes
INFO:graphiti_core.utils.bulk_utils:First episode data: {'uuid': 'b4b9fc32-09f6-438f-8852-36014a7a85da', 'name': 'Debug Test Episode', 'group_id': 'debug_test_group', 'labels': [], 'created_at': '2025-08-21T12:55:34.540512+00:00', 'source': 'message', 'source_description': 'Direct debug test', 'content': 'This is a debug test episode to verify database writes', 'valid_at': '2025-08-21T08:55:34.540501', 'entity_edges': ['f49c359f-07c5-434f-9c27-f8fbc65ec09c']}
INFO:graphiti_core.utils.bulk_utils:First episode type: <class 'dict'>
INFO:graphiti_core.utils.bulk_utils:  uuid: b4b9fc32-09f6-438f-8852-36014a7a85da (type: <class 'str'>)
INFO:graphiti_core.utils.bulk_utils:  name: Debug Test Episode (type: <class 'str'>)
INFO:graphiti_core.utils.bulk_utils:  group_id: debug_test_group (type: <class 'str'>)
INFO:graphiti_core.utils.bulk_utils:  labels: [] (type: <class 'list'>)
INFO:graphiti_core.utils.bulk_utils:  created_at: 2025-08-21T12:55:34.540512+00:00 (type: <class 'str'>)
INFO:graphiti_core.utils.bulk_utils:  source: message (type: <class 'str'>)
INFO:graphiti_core.utils.bulk_utils:  source_description: Direct debug test (type: <class 'str'>)
INFO:graphiti_core.utils.bulk_utils:  content: This is a debug test episode to verify database writes (type: <class 'str'>)
INFO:graphiti_core.utils.bulk_utils:  valid_at: 2025-08-21T08:55:34.540501 (type: <class 'str'>)
INFO:graphiti_core.utils.bulk_utils:  entity_edges: ['f49c359f-07c5-434f-9c27-f8fbc65ec09c'] (type: <class 'list'>)
Traceback (most recent call last):
  File "/opt/stacks/graphiti/test_direct_episode.py", line 51, in test_direct_episode_creation
    result = await graphiti.add_episode(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/stacks/graphiti/graphiti_core/graphiti.py", line 564, in add_episode
    raise e
  File "/opt/stacks/graphiti/graphiti_core/graphiti.py", line 536, in add_episode
    await add_nodes_and_edges_bulk(
  File "/opt/stacks/graphiti/graphiti_core/utils/bulk_utils.py", line 98, in add_nodes_and_edges_bulk
    await session.execute_write(
  File "/opt/stacks/graphiti/graphiti_core/driver/falkordb_driver.py", line 57, in execute_write
    return await func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/stacks/graphiti/graphiti_core/utils/bulk_utils.py", line 189, in add_nodes_and_edges_bulk_tx
    await tx.run(EPISODIC_NODE_SAVE_BULK, episodes=episodes)
  File "/opt/stacks/graphiti/graphiti_core/driver/falkordb_driver.py", line 68, in run
    await self.graph.query(str(query), params)  # type: ignore[reportUnknownArgumentType]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/falkordb/asyncio/graph.py", line 105, in query
    return await self._query(q, params=params, timeout=timeout, read_only=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/falkordb/asyncio/graph.py", line 79, in _query
    response = await self.execute_command(*command)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/redis/asyncio/client.py", line 646, in execute_command
    return await conn.retry.call_with_retry(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/redis/asyncio/retry.py", line 59, in call_with_retry
    return await do()
           ^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/redis/asyncio/client.py", line 620, in _send_command_parse_response
    return await self.parse_response(conn, command_name, **options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/redis/asyncio/client.py", line 667, in parse_response
    response = await connection.read_response()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/redis/asyncio/connection.py", line 590, in read_response
    raise response from None
redis.exceptions.ResponseError: mandatory constraint violation: node with label Episodic missing property group_id
=== Testing Direct Episode Creation ===
✅ Graphiti instance created
Driver type: <class 'graphiti_core.driver.falkordb_driver.FalkorDriver'>
LLM client type: <class 'graphiti_core.llm_client.fallback_client.FallbackLLMClient'>
Embedder type: <class 'graphiti_core.embedder.openai.OpenAIEmbedder'>
❌ Direct episode test failed: mandatory constraint violation: node with label Episodic missing property group_id
DEBUG:httpcore.connection:close.started
DEBUG:httpcore.connection:close.complete
DEBUG:httpcore.connection:close.started
DEBUG:httpcore.connection:close.complete
