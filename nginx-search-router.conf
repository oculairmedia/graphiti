events {
    worker_connections 1024;
}

http {
    upstream search_backend {
        # Rust search service (primary - faster)
        server graphiti-search-rs:3004 weight=8 max_fails=2 fail_timeout=10s;
        
        # Python search service (fallback)
        # Uncomment when Python API is available
        # server graphiti-python-api:8000 weight=2 max_fails=2 fail_timeout=10s backup;
    }

    # Health check endpoints for upstreams
    upstream health_check {
        server graphiti-search-rs:3004;
        # server graphiti-python-api:8000;
        
        keepalive 32;
    }

    # Rate limiting zone
    limit_req_zone $binary_remote_addr zone=search_limit:10m rate=100r/s;
    
    # Response caching zone
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=search_cache:10m 
                     max_size=100m inactive=60m use_temp_path=off;

    server {
        listen 80;
        server_name _;
        
        # Logging
        access_log /var/log/nginx/access.log combined;
        error_log /var/log/nginx/error.log warn;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Health check endpoint (no caching, no rate limiting)
        location /health {
            proxy_pass http://health_check/health;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            access_log off;
        }
        
        # Search endpoints with caching
        location /search {
            # Rate limiting
            limit_req zone=search_limit burst=20 nodelay;
            
            # Caching for GET requests only
            proxy_cache search_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_key "$request_method$request_uri$request_body";
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_bypass $http_cache_control;
            add_header X-Cache-Status $upstream_cache_status;
            
            # Load balancing
            proxy_pass http://search_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Error handling - try next upstream on failure
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 5s;
        }
        
        # Specialized search endpoints
        location ~ ^/search/(edges|nodes|episodes|communities)$ {
            limit_req zone=search_limit burst=20 nodelay;
            
            proxy_pass http://search_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Shorter cache for specialized endpoints
            proxy_cache search_cache;
            proxy_cache_valid 200 2m;
            proxy_cache_valid 404 30s;
            
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 5s;
        }
        
        # Metrics endpoint (if implemented)
        location /metrics {
            proxy_pass http://search_backend/metrics;
            access_log off;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            allow 127.0.0.1;
            deny all;
        }
        
        # Default fallback
        location / {
            return 404 '{"error": "Not Found"}';
            add_header Content-Type application/json;
        }
    }
}